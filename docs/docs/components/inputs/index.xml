<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Baker, high performance modular pipelines for the Big Data era – Inputs</title>
    <link>https://getbaker.io/docs/components/inputs/</link>
    <description>Recent content in Inputs on Baker, high performance modular pipelines for the Big Data era</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 12 Dec 2022 00:00:00 +0000</lastBuildDate>
    
	  <atom:link href="https://getbaker.io/docs/components/inputs/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: KCL</title>
      <link>https://getbaker.io/docs/components/inputs/kcl/</link>
      <pubDate>Mon, 12 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://getbaker.io/docs/components/inputs/kcl/</guid>
      <description>
        
        
        

&lt;div class=&#34;pageinfo pageinfo-primary&#34;&gt;
&lt;p&gt;&lt;strong&gt;Read the &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker/input#KCL&#34;&gt;API documentation »&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;h2 id=&#34;input-kcl&#34;&gt;Input &lt;em&gt;KCL&lt;/em&gt;&lt;/h2&gt;
&lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;
&lt;p&gt;This input fetches records from Kinesis with KCL. It consumes a specified stream, and
processes all shards in that stream. It never exits.
Multiple baker instances can consume the same stream, in that case the KCL will take care of
balancing the shards between workers. Careful (shard stealing is not implemented yet).
Resharding on the producer side is automatically handled by the KCL that will distribute
the shards among KCL workers.&lt;/p&gt;
&lt;h3 id=&#34;configuration&#34;&gt;Configuration&lt;/h3&gt;
&lt;p&gt;Keys available in the &lt;code&gt;[input.config]&lt;/code&gt; section:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Type&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Default&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Required&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;AwsRegion&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;string&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;ldquo;us-west-2&amp;rdquo;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td&gt;AWS region to connect to&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Stream&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;string&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;quot;&amp;quot;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;true&lt;/td&gt;
&lt;td&gt;Name of Kinesis stream&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AppName&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;string&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;quot;&amp;quot;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;true&lt;/td&gt;
&lt;td&gt;Used by KCL to allow multiple app to consume the same stream.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MaxShards&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;int&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;32767&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td&gt;Max shards this Worker can handle at a time&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ShardSync&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;duration&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;60s&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td&gt;Time between tasks to sync leases and Kinesis shards&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;InitialPosition&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;string&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;ldquo;LATEST&amp;rdquo;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td&gt;Position in the stream where a new application should start from. Values: LATEST or TRIM_HORIZON&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Kinesis</title>
      <link>https://getbaker.io/docs/components/inputs/kinesis/</link>
      <pubDate>Mon, 12 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://getbaker.io/docs/components/inputs/kinesis/</guid>
      <description>
        
        
        

&lt;div class=&#34;pageinfo pageinfo-primary&#34;&gt;
&lt;p&gt;&lt;strong&gt;Read the &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker/input#Kinesis&#34;&gt;API documentation »&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;h2 id=&#34;input-kinesis&#34;&gt;Input &lt;em&gt;Kinesis&lt;/em&gt;&lt;/h2&gt;
&lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;
&lt;p&gt;This input fetches log lines from Kinesis. It listens on a specified stream, and
processes all the shards in that stream. It never exits.&lt;/p&gt;
&lt;h3 id=&#34;configuration&#34;&gt;Configuration&lt;/h3&gt;
&lt;p&gt;Keys available in the &lt;code&gt;[input.config]&lt;/code&gt; section:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Type&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Default&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Required&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;AwsRegion&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;string&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;ldquo;us-west-2&amp;rdquo;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td&gt;AWS region to connect to&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Stream&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;string&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;quot;&amp;quot;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;true&lt;/td&gt;
&lt;td&gt;Stream name on Kinesis&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IdleTime&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;duration&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;100ms&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td&gt;Time between polls of each shard&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: List</title>
      <link>https://getbaker.io/docs/components/inputs/list/</link>
      <pubDate>Mon, 12 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://getbaker.io/docs/components/inputs/list/</guid>
      <description>
        
        
        

&lt;div class=&#34;pageinfo pageinfo-primary&#34;&gt;
&lt;p&gt;&lt;strong&gt;Read the &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker/input#List&#34;&gt;API documentation »&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;h2 id=&#34;input-list&#34;&gt;Input &lt;em&gt;List&lt;/em&gt;&lt;/h2&gt;
&lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;
&lt;p&gt;This input fetches logs from a predefined list of local or remote sources. The &amp;ldquo;Files&amp;rdquo;
configuration variable is a list of &amp;ldquo;file specifiers&amp;rdquo;. Each &amp;ldquo;file specifier&amp;rdquo; can be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A local file path on the filesystem: the log file at that path will be processed&lt;/li&gt;
&lt;li&gt;A HTTP/HTTPS URL: the log file at that URL will be downloaded and processed&lt;/li&gt;
&lt;li&gt;A S3 URL: the log file at that URL that will be downloaded and processed&lt;/li&gt;
&lt;li&gt;&amp;ldquo;@&amp;rdquo; followed by a local path pointing to a file: the file is expected to be a text file
and each line will be read and parsed as a &amp;ldquo;file specifier&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;@&amp;rdquo; followed by a HTTP/HTTPS URL: the text file pointed by the URL will be downloaded,
and each line will be read and parsed as a &amp;ldquo;file specifier&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;@&amp;rdquo; followed by a S3 URL pointing to a file: the text file pointed by the URL will be
downloaded, and each line will be read and parsed as a &amp;ldquo;file specifier&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;@&amp;rdquo; followed by a local path pointing to a directory (must end with a slash): the directory will be recursively
walked, and all files matching the &amp;ldquo;MatchPath&amp;rdquo; option regexp will be processed as logfiles&lt;/li&gt;
&lt;li&gt;&amp;ldquo;@&amp;rdquo; followed by a S3 URL pointing to a directory: the directory on S3 will be recursively
walked, and all files matching the &amp;ldquo;MatchPath&amp;rdquo; option regexp will be processed as logfiles&lt;/li&gt;
&lt;li&gt;&amp;ldquo;-&amp;rdquo;: the contents of a log file will be read from stdin and processed&lt;/li&gt;
&lt;li&gt;&amp;ldquo;@-&amp;rdquo;: each line read from stdin will be parsed as a &amp;ldquo;file specifier&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All records produced by this input contain 2 metadata values:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;url: the files that originally contained the record&lt;/li&gt;
&lt;li&gt;last_modified: the last modification datetime of the above file&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;configuration&#34;&gt;Configuration&lt;/h3&gt;
&lt;p&gt;Keys available in the &lt;code&gt;[input.config]&lt;/code&gt; section:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Type&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Default&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Required&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Files&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;array of strings&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;[&amp;quot;-&amp;quot;]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td&gt;List of log-files, directories and/or list-files to process&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MatchPath&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;string&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;ldquo;.*.log.gz&amp;rdquo;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td&gt;regexp to filter files in specified directories&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Region&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;string&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;ldquo;us-west-2&amp;rdquo;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td&gt;AWS Region for fetching from S3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: SQS</title>
      <link>https://getbaker.io/docs/components/inputs/sqs/</link>
      <pubDate>Mon, 12 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://getbaker.io/docs/components/inputs/sqs/</guid>
      <description>
        
        
        

&lt;div class=&#34;pageinfo pageinfo-primary&#34;&gt;
&lt;p&gt;&lt;strong&gt;Read the &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker/input#SQS&#34;&gt;API documentation »&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;h2 id=&#34;input-sqs&#34;&gt;Input &lt;em&gt;SQS&lt;/em&gt;&lt;/h2&gt;
&lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;
&lt;p&gt;This input listens on multiple SQS queues for paths to S3 files.
It can be used with SQS queues subscribed to SNS topics (with raw_message_delivery subscription) and supports arbitrary payload (plain or json).
It never exits.&lt;/p&gt;
&lt;p&gt;Supported formats (MessageFormat):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;plain&amp;rdquo;: the message payload is a plain S3 path.&lt;/li&gt;
&lt;li&gt;&amp;ldquo;sns&amp;rdquo;: the payload is an SNS notification&lt;/li&gt;
&lt;li&gt;&amp;ldquo;s3::ObjectCreated&amp;rdquo;: the payload is the message generated by an S3::ObjectCreated notification&lt;/li&gt;
&lt;li&gt;&amp;ldquo;json&amp;rdquo;: the message is an arbitrary JSON string, the S3 path is extracted from it via a &lt;a href=&#34;https://jmespath.org/&#34;&gt;jmespath&lt;/a&gt; expression specified in MessageExpression.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;configuration&#34;&gt;Configuration&lt;/h3&gt;
&lt;p&gt;Keys available in the &lt;code&gt;[input.config]&lt;/code&gt; section:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Type&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Default&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Required&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;AwsRegion&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;string&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;ldquo;us-west-2&amp;rdquo;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td&gt;AWS region to connect to&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Bucket&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;string&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;quot;&amp;quot;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td&gt;S3 Bucket to use if paths do not have one&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;QueuePrefixes&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;array of strings&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;[]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td&gt;Prefixes of the names of the SQS queues to monitor&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;QueueNames&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;array of strings&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;[]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td&gt;Names of the SQS queues to monitor&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MessageFormat&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;string&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;ldquo;sns&amp;rdquo;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td&gt;SQS message format. See help string for supported formats&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MessageExpression&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;string&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;quot;&amp;quot;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td&gt;The expression to extract an S3 path from arbitrary message formats&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FilePathFilter&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;string&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;quot;&amp;quot;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td&gt;If provided, will only use S3 files with the given path.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: TCP</title>
      <link>https://getbaker.io/docs/components/inputs/tcp/</link>
      <pubDate>Mon, 12 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://getbaker.io/docs/components/inputs/tcp/</guid>
      <description>
        
        
        

&lt;div class=&#34;pageinfo pageinfo-primary&#34;&gt;
&lt;p&gt;&lt;strong&gt;Read the &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker/input#TCP&#34;&gt;API documentation »&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;h2 id=&#34;input-tcp&#34;&gt;Input &lt;em&gt;TCP&lt;/em&gt;&lt;/h2&gt;
&lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;
&lt;p&gt;This input relies on a TCP connection to receive records in the usual format
Configure it with a host and port that you want to accept connection from.
By default it listens on port 6000 for any connection
It never exits.&lt;/p&gt;
&lt;h3 id=&#34;configuration&#34;&gt;Configuration&lt;/h3&gt;
&lt;p&gt;Keys available in the &lt;code&gt;[input.config]&lt;/code&gt; section:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Type&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Default&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Required&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Listener&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;string&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;quot;&amp;quot;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td&gt;Host:Port to bind to&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
  </channel>
</rss>
