<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Baker – Documentation</title>
    <link>https://getbaker.io/docs/</link>
    <description>Recent content in Documentation on Baker</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 16 Nov 2020 00:00:00 +0000</lastBuildDate>
    
	  <atom:link href="https://getbaker.io/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: KCL</title>
      <link>https://getbaker.io/docs/components/inputs/kcl/</link>
      <pubDate>Thu, 12 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://getbaker.io/docs/components/inputs/kcl/</guid>
      <description>
        
        
        &lt;h2 id=&#34;input-kcl&#34;&gt;Input &lt;em&gt;KCL&lt;/em&gt;&lt;/h2&gt;
&lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;
&lt;p&gt;This input fetches records from Kinesis with KCL.
It consumes a specified stream, and
processes all shards in that stream.
It never exits.&lt;/p&gt;
&lt;p&gt;Multiple baker instances can consume the same stream, in that case the KCL will take care of
balancing the shards between workers.
Careful (shard stealing is not implemented yet).&lt;/p&gt;
&lt;p&gt;Resharding on the producer side is automatically handled by the KCL that will distribute
the shards among KCL workers.&lt;/p&gt;
&lt;h3 id=&#34;configuration&#34;&gt;Configuration&lt;/h3&gt;
&lt;p&gt;Keys available in the &lt;code&gt;[input.config]&lt;/code&gt; section:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Name&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Type&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Default&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Required&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;AwsRegion&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;string&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;ldquo;us-west-2&amp;rdquo;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;AWS region to connect to&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Stream&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;string&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;quot;&amp;quot;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Name of Kinesis stream&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;AppName&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;string&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;quot;&amp;quot;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Used by KCL to allow multiple app to consume the same stream.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;MaxShards&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;int&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;32767&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Max shards this Worker can handle at a time&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ShardSync&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;duration&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;60s&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Time between tasks to sync leases and Kinesis shards&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;InitialPosition&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;string&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;ldquo;LATEST&amp;rdquo;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Position in the stream where a new application should start from. Values: LATEST or TRIM_HORIZON&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Kinesis</title>
      <link>https://getbaker.io/docs/components/inputs/kinesis/</link>
      <pubDate>Thu, 12 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://getbaker.io/docs/components/inputs/kinesis/</guid>
      <description>
        
        
        &lt;h2 id=&#34;input-kinesis&#34;&gt;Input &lt;em&gt;Kinesis&lt;/em&gt;&lt;/h2&gt;
&lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;
&lt;p&gt;This input fetches log lines from Kinesis.
It listens on a specified stream, and
processes all the shards in that stream.
It never exits.&lt;/p&gt;
&lt;h3 id=&#34;configuration&#34;&gt;Configuration&lt;/h3&gt;
&lt;p&gt;Keys available in the &lt;code&gt;[input.config]&lt;/code&gt; section:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Name&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Type&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Default&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Required&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;AwsRegion&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;string&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;ldquo;us-west-2&amp;rdquo;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;AWS region to connect to&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Stream&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;string&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;quot;&amp;quot;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Stream name on Kinesis&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;IdleTime&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;duration&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;100ms&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Time between polls of each shard&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: List</title>
      <link>https://getbaker.io/docs/components/inputs/list/</link>
      <pubDate>Thu, 12 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://getbaker.io/docs/components/inputs/list/</guid>
      <description>
        
        
        &lt;h2 id=&#34;input-list&#34;&gt;Input &lt;em&gt;List&lt;/em&gt;&lt;/h2&gt;
&lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;
&lt;p&gt;This input fetches logs from a predefined list of local or remote sources.
The &amp;ldquo;Files&amp;rdquo;
configuration variable is a list of &amp;ldquo;file specifiers&amp;rdquo;.
Each &amp;ldquo;file specifier&amp;rdquo; can be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A local file path on the filesystem:
the log file at that path will be processed&lt;/li&gt;
&lt;li&gt;A HTTP/HTTPS URL:
the log file at that URL will be downloaded and processed&lt;/li&gt;
&lt;li&gt;A S3 URL:
the log file at that URL that will be downloaded and processed&lt;/li&gt;
&lt;li&gt;&amp;ldquo;@&amp;rdquo; followed by a local path pointing to a file:
the file is expected to be a text file
and each line will be read and parsed as a &amp;ldquo;file specifier&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;@&amp;rdquo; followed by a HTTP/HTTPS URL:
the text file pointed by the URL will be downloaded,
and each line will be read and parsed as a &amp;ldquo;file specifier&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;@&amp;rdquo; followed by a S3 URL pointing to a file:
the text file pointed by the URL will be
downloaded, and each line will be read and parsed as a &amp;ldquo;file specifier&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;@&amp;rdquo; followed by a local path pointing to a directory (must end with a slash):
the directory will be recursively
walked, and all files matching the &amp;ldquo;MatchPath&amp;rdquo; option regexp will be processed as logfiles&lt;/li&gt;
&lt;li&gt;&amp;ldquo;@&amp;rdquo; followed by a S3 URL pointing to a directory:
the directory on S3 will be recursively
walked, and all files matching the &amp;ldquo;MatchPath&amp;rdquo; option regexp will be processed as logfiles&lt;/li&gt;
&lt;li&gt;&amp;ldquo;-&amp;quot;:
the contents of a log file will be read from stdin and processed&lt;/li&gt;
&lt;li&gt;&amp;ldquo;@-&amp;quot;:
each line read from stdin will be parsed as a &amp;ldquo;file specifier&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All records produced by this input contain 2 metadata values:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;url:
the files that originally contained the record&lt;/li&gt;
&lt;li&gt;last_modified:
the last modification datetime of the above file&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;configuration&#34;&gt;Configuration&lt;/h3&gt;
&lt;p&gt;Keys available in the &lt;code&gt;[input.config]&lt;/code&gt; section:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Name&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Type&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Default&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Required&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Files&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;array of strings&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;[&amp;quot;-&amp;quot;]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;List of log-files, directories and/or list-files to process&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;MatchPath&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;string&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;ldquo;.*.log.gz&amp;rdquo;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;regexp to filter files in specified directories&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Region&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;string&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;ldquo;us-west-2&amp;rdquo;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;AWS Region for fetching from S3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: SQS</title>
      <link>https://getbaker.io/docs/components/inputs/sqs/</link>
      <pubDate>Thu, 12 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://getbaker.io/docs/components/inputs/sqs/</guid>
      <description>
        
        
        &lt;h2 id=&#34;input-sqs&#34;&gt;Input &lt;em&gt;SQS&lt;/em&gt;&lt;/h2&gt;
&lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;
&lt;p&gt;This input listens on multiple SQS queues for new incoming log files
on S3; it is meant to be used with SQS queues popoulated by SNS.&lt;/p&gt;
&lt;p&gt;It never exits.&lt;/p&gt;
&lt;h3 id=&#34;configuration&#34;&gt;Configuration&lt;/h3&gt;
&lt;p&gt;Keys available in the &lt;code&gt;[input.config]&lt;/code&gt; section:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Name&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Type&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Default&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Required&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;AwsRegion&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;string&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;ldquo;us-west-2&amp;rdquo;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;AWS region to connect to&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Bucket&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;string&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;quot;&amp;quot;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;S3 Bucket to use for processing&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;QueuePrefixes&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;array of strings&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Prefixes of the names of the SQS queues to monitor&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;MessageFormat&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;string&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;ldquo;sns&amp;rdquo;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;The format of the SQS messages.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;lsquo;plain&amp;rsquo; the SQS messages received have the S3 file path as a plain string.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;lsquo;sns&amp;rsquo; the SQS messages were produced by a SNS notification.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;FilePathFilter&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;string&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;quot;&amp;quot;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;If provided, will only use S3 files with the given path.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: TCP</title>
      <link>https://getbaker.io/docs/components/inputs/tcp/</link>
      <pubDate>Thu, 12 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://getbaker.io/docs/components/inputs/tcp/</guid>
      <description>
        
        
        &lt;h2 id=&#34;input-tcp&#34;&gt;Input &lt;em&gt;TCP&lt;/em&gt;&lt;/h2&gt;
&lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;
&lt;p&gt;This input relies on a TCP connection to receive records in the usual format
Configure it with a host and port that you want to accept connection from.&lt;/p&gt;
&lt;p&gt;By default it listens on port 6000 for any connection
It never exits.&lt;/p&gt;
&lt;h3 id=&#34;configuration&#34;&gt;Configuration&lt;/h3&gt;
&lt;p&gt;Keys available in the &lt;code&gt;[input.config]&lt;/code&gt; section:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Name&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Type&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Default&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Required&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Listener&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;string&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;quot;&amp;quot;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Host:Port to bind to&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: ClauseFilter</title>
      <link>https://getbaker.io/docs/components/filters/clausefilter/</link>
      <pubDate>Thu, 12 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://getbaker.io/docs/components/filters/clausefilter/</guid>
      <description>
        
        
        &lt;h2 id=&#34;filter-clausefilter&#34;&gt;Filter &lt;em&gt;ClauseFilter&lt;/em&gt;&lt;/h2&gt;
&lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;
&lt;p&gt;This filter lets you set a boolean expression (in s-expression format) that will be matched against all records and dropped if they don&amp;rsquo;t match the expression.&lt;/p&gt;
&lt;p&gt;Check the filter file for documentation what the format looks like.&lt;/p&gt;
&lt;h3 id=&#34;configuration&#34;&gt;Configuration&lt;/h3&gt;
&lt;p&gt;Keys available in the &lt;code&gt;[filter.config]&lt;/code&gt; section:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Name&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Type&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Default&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Required&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Clause&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;string&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;quot;&amp;quot;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Boolean formula describing which events to let through. If empty, let everything through.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: ClearFields</title>
      <link>https://getbaker.io/docs/components/filters/clearfields/</link>
      <pubDate>Thu, 12 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://getbaker.io/docs/components/filters/clearfields/</guid>
      <description>
        
        
        &lt;h2 id=&#34;filter-clearfields&#34;&gt;Filter &lt;em&gt;ClearFields&lt;/em&gt;&lt;/h2&gt;
&lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;
&lt;p&gt;Clear a set of fields of all records passing through&lt;/p&gt;
&lt;h3 id=&#34;configuration&#34;&gt;Configuration&lt;/h3&gt;
&lt;p&gt;Keys available in the &lt;code&gt;[filter.config]&lt;/code&gt; section:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Name&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Type&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Default&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Required&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Fields&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;array of strings&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;set of fields to clear&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Concatenate</title>
      <link>https://getbaker.io/docs/components/filters/concatenate/</link>
      <pubDate>Thu, 12 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://getbaker.io/docs/components/filters/concatenate/</guid>
      <description>
        
        
        &lt;h2 id=&#34;filter-concatenate&#34;&gt;Filter &lt;em&gt;Concatenate&lt;/em&gt;&lt;/h2&gt;
&lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;
&lt;p&gt;Concatenate up to 10 fields&#39; values to a single field&lt;/p&gt;
&lt;h3 id=&#34;configuration&#34;&gt;Configuration&lt;/h3&gt;
&lt;p&gt;Keys available in the &lt;code&gt;[filter.config]&lt;/code&gt; section:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Name&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Type&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Default&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Required&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Fields&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;array of strings&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;The field names to concatenate, in order&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Target&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;string&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;quot;&amp;quot;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;The field name to save the concatenated value to&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Separator&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;string&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;quot;&amp;quot;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Separator to concatenate the values. Must either be empty or a single ASCII, non-nil char&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: RegexMatch</title>
      <link>https://getbaker.io/docs/components/filters/regexmatch/</link>
      <pubDate>Thu, 12 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://getbaker.io/docs/components/filters/regexmatch/</guid>
      <description>
        
        
        &lt;h2 id=&#34;filter-regexmatch&#34;&gt;Filter &lt;em&gt;RegexMatch&lt;/em&gt;&lt;/h2&gt;
&lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;
&lt;p&gt;Discard a record if one or more fields don&amp;rsquo;t match the corresponding regular expressions&lt;/p&gt;
&lt;h3 id=&#34;configuration&#34;&gt;Configuration&lt;/h3&gt;
&lt;p&gt;Keys available in the &lt;code&gt;[filter.config]&lt;/code&gt; section:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Name&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Type&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Default&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Required&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Fields&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;array of strings&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;[]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;list of fields to match with the corresponding regular expression in Regexs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Regexs&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;array of strings&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;[]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;list of regular expression to match. Fields[0] must match Regexs[0], Fields[1] Regexs[1] and so on&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: NotNull</title>
      <link>https://getbaker.io/docs/components/filters/notnull/</link>
      <pubDate>Thu, 12 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://getbaker.io/docs/components/filters/notnull/</guid>
      <description>
        
        
        &lt;h2 id=&#34;filter-notnull&#34;&gt;Filter &lt;em&gt;NotNull&lt;/em&gt;&lt;/h2&gt;
&lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;
&lt;p&gt;Discard the records having null (i.
e empty) fields.&lt;/p&gt;
&lt;h3 id=&#34;configuration&#34;&gt;Configuration&lt;/h3&gt;
&lt;p&gt;Keys available in the &lt;code&gt;[filter.config]&lt;/code&gt; section:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Name&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Type&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Default&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Required&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Fields&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;array of strings&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Fields is the list of fields to check for null/empty values&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: ReplaceFields</title>
      <link>https://getbaker.io/docs/components/filters/replacefields/</link>
      <pubDate>Thu, 12 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://getbaker.io/docs/components/filters/replacefields/</guid>
      <description>
        
        
        &lt;h2 id=&#34;filter-replacefields&#34;&gt;Filter &lt;em&gt;ReplaceFields&lt;/em&gt;&lt;/h2&gt;
&lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;
&lt;p&gt;Copy a field value or a fixed value to another field.
Can copy multiple fields.&lt;/p&gt;
&lt;h3 id=&#34;configuration&#34;&gt;Configuration&lt;/h3&gt;
&lt;p&gt;Keys available in the &lt;code&gt;[filter.config]&lt;/code&gt; section:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Name&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Type&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Default&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Required&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;CopyFields&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;array of strings&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;List of src, dst field pairs, for example [&amp;ldquo;srcField1&amp;rdquo;, &amp;ldquo;dstField1&amp;rdquo;, &amp;ldquo;srcField2&amp;rdquo;, &amp;ldquo;dstField2&amp;rdquo;]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ReplaceFields&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;array of strings&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;List of field, value pairs, for example: [&amp;ldquo;Foo&amp;rdquo;, &amp;ldquo;dstField1&amp;rdquo;, &amp;ldquo;Bar&amp;rdquo;, &amp;ldquo;dstField2&amp;rdquo;]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: SetStringFromURL</title>
      <link>https://getbaker.io/docs/components/filters/setstringfromurl/</link>
      <pubDate>Thu, 12 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://getbaker.io/docs/components/filters/setstringfromurl/</guid>
      <description>
        
        
        &lt;h2 id=&#34;filter-setstringfromurl&#34;&gt;Filter &lt;em&gt;SetStringFromURL&lt;/em&gt;&lt;/h2&gt;
&lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;
&lt;p&gt;Extract some strings from metadata url and sets a field with it.&lt;/p&gt;
&lt;h3 id=&#34;configuration&#34;&gt;Configuration&lt;/h3&gt;
&lt;p&gt;Keys available in the &lt;code&gt;[filter.config]&lt;/code&gt; section:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Name&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Type&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Default&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Required&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Field&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;string&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;quot;&amp;quot;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Name of the field to set to&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Strings&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;array of strings&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Strings to look for in the URL. Discard records not containing any of them.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: TimestampRange</title>
      <link>https://getbaker.io/docs/components/filters/timestamprange/</link>
      <pubDate>Thu, 12 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://getbaker.io/docs/components/filters/timestamprange/</guid>
      <description>
        
        
        &lt;h2 id=&#34;filter-timestamprange&#34;&gt;Filter &lt;em&gt;TimestampRange&lt;/em&gt;&lt;/h2&gt;
&lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;
&lt;p&gt;Discard records if the value of a field containing a timestamp is out of the given time range (i.
e StartDateTime &amp;lt;= value &amp;lt; EndDateTime)&lt;/p&gt;
&lt;h3 id=&#34;configuration&#34;&gt;Configuration&lt;/h3&gt;
&lt;p&gt;Keys available in the &lt;code&gt;[filter.config]&lt;/code&gt; section:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Name&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Type&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Default&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Required&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;StartDatetime&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;string&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;ldquo;no bound&amp;rdquo;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Lower bound of the accepted time interval (inclusive, UTC) format:&amp;lsquo;2006-01-31 15:04:05&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;EndDatetime&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;string&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;ldquo;no bound&amp;rdquo;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Upper bound of the accepted time interval (exclusive, UTC) format:&amp;lsquo;2006-01-31 15:04:05&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Field&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;string&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;quot;&amp;quot;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Name of the field containing the Unix EPOCH timestamp&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: DynamoDB</title>
      <link>https://getbaker.io/docs/components/outputs/dynamodb/</link>
      <pubDate>Thu, 12 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://getbaker.io/docs/components/outputs/dynamodb/</guid>
      <description>
        
        
        &lt;h2 id=&#34;output-dynamodb&#34;&gt;Output &lt;em&gt;DynamoDB&lt;/em&gt;&lt;/h2&gt;
&lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;
&lt;p&gt;This is a &lt;em&gt;non-raw&lt;/em&gt; output, it doesn&amp;rsquo;t receive whole records. Instead it receives a list of fields for each record (&lt;code&gt;output.fields&lt;/code&gt; in TOML).&lt;/p&gt;
&lt;p&gt;This output writes the filtered log lines to DynamoDB.
It must be
configured specifying the region, the table name, and the columns
to write.&lt;/p&gt;
&lt;p&gt;Columns are specified using the syntax &amp;ldquo;t:
name&amp;rdquo; where &amp;ldquo;t&amp;rdquo;
is the type of the data, and &amp;ldquo;name&amp;rdquo; is the name of column.
Supported
types are:
&amp;ldquo;n&amp;rdquo; - integers; &amp;ldquo;s&amp;rdquo; - strings.&lt;/p&gt;
&lt;p&gt;The first column (and field) must be the primary key.&lt;/p&gt;
&lt;h3 id=&#34;configuration&#34;&gt;Configuration&lt;/h3&gt;
&lt;p&gt;Keys available in the &lt;code&gt;[output.config]&lt;/code&gt; section:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Name&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Type&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Default&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Required&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Regions&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;array of strings&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;us-west-2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;DynamoDB regions to connect to&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Table&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;string&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;quot;&amp;quot;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Name of the table to modify&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Columns&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;array of strings&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Table columns that correspond to each of the fields being written&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;FlushInterval&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;duration&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1s&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Interval at which flush the data to DynamoDB even if we have not reached 25 records&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;MaxWritesPerSec&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;int&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Maximum number of writes per second that DynamoDB can accept (0 for unlimited)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;MaxBackoff&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;duration&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2m&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Maximum retry/backoff time in case of errors before giving up&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: FileWriter</title>
      <link>https://getbaker.io/docs/components/outputs/filewriter/</link>
      <pubDate>Thu, 12 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://getbaker.io/docs/components/outputs/filewriter/</guid>
      <description>
        
        
        &lt;h2 id=&#34;output-filewriter&#34;&gt;Output &lt;em&gt;FileWriter&lt;/em&gt;&lt;/h2&gt;
&lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;
&lt;p&gt;This is a &lt;em&gt;raw&lt;/em&gt; output, for each record it receives a buffer containing the serialized record, plus a list holding a set of fields (&lt;code&gt;output.fields&lt;/code&gt; in TOML).&lt;/p&gt;
&lt;p&gt;This output writes the records into compressed files in a directory.&lt;/p&gt;
&lt;p&gt;Files will be compressed using Gzip or Zstandard based on the filename extension in PathString.&lt;/p&gt;
&lt;p&gt;The file names can contain placeholders that are populated by the output (see the keys help below).&lt;/p&gt;
&lt;p&gt;When the special {{.
Field0}} placeholder is used, then the user must specify the field name to
use for replacement in the fields configuration list.&lt;/p&gt;
&lt;p&gt;The value of that field, extracted from each record, is used as replacement and, moreover, this
also means that each created file will contain only records with that same value for the field.&lt;/p&gt;
&lt;p&gt;Note that, with this option, the FileWriter creates as many workers as the different values
of the field, and each one of these workers concurrently writes to a different file.&lt;/p&gt;
&lt;h3 id=&#34;configuration&#34;&gt;Configuration&lt;/h3&gt;
&lt;p&gt;Keys available in the &lt;code&gt;[output.config]&lt;/code&gt; section:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Name&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Type&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Default&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Required&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PathString&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;string&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;quot;&amp;quot;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Template to describe location of the output directory: supports .Year, .Month, .Day and .Rotation. Also .Field0 if a field name has been specified in the output&amp;rsquo;s fields list.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;RotateInterval&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;duration&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;60s&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Time after which data will be rotated. If -1, it will not rotate until the end.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ZstdCompressionLevel&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;int&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;zstd compression level, ranging from 1 (best speed) to 19 (best compression).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ZstdWindowLog&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;int&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Enable zstd long distance matching. Increase memory usage for both compressor/decompressor. If more than 27 the decompressor requires special treatment. 0:disabled.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Nop</title>
      <link>https://getbaker.io/docs/components/outputs/nop/</link>
      <pubDate>Thu, 12 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://getbaker.io/docs/components/outputs/nop/</guid>
      <description>
        
        
        &lt;h2 id=&#34;output-nop&#34;&gt;Output &lt;em&gt;Nop&lt;/em&gt;&lt;/h2&gt;
&lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;
&lt;p&gt;This is a &lt;em&gt;non-raw&lt;/em&gt; output, it doesn&amp;rsquo;t receive whole records. Instead it receives a list of fields for each record (&lt;code&gt;output.fields&lt;/code&gt; in TOML).&lt;/p&gt;
&lt;p&gt;No-operation output.
This output simply drops all lines and does not write them anywhere.&lt;/p&gt;
&lt;h3 id=&#34;configuration&#34;&gt;Configuration&lt;/h3&gt;
&lt;p&gt;No configuration available&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: OpLog</title>
      <link>https://getbaker.io/docs/components/outputs/oplog/</link>
      <pubDate>Thu, 12 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://getbaker.io/docs/components/outputs/oplog/</guid>
      <description>
        
        
        &lt;h2 id=&#34;output-oplog&#34;&gt;Output &lt;em&gt;OpLog&lt;/em&gt;&lt;/h2&gt;
&lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;
&lt;p&gt;This is a &lt;em&gt;non-raw&lt;/em&gt; output, it doesn&amp;rsquo;t receive whole records. Instead it receives a list of fields for each record (&lt;code&gt;output.fields&lt;/code&gt; in TOML).&lt;/p&gt;
&lt;p&gt;This output writes the filtered log lines into the current baker log, purely for development purpose.&lt;/p&gt;
&lt;h3 id=&#34;configuration&#34;&gt;Configuration&lt;/h3&gt;
&lt;p&gt;No configuration available&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Stats</title>
      <link>https://getbaker.io/docs/components/outputs/stats/</link>
      <pubDate>Thu, 12 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://getbaker.io/docs/components/outputs/stats/</guid>
      <description>
        
        
        &lt;h2 id=&#34;output-stats&#34;&gt;Output &lt;em&gt;Stats&lt;/em&gt;&lt;/h2&gt;
&lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;
&lt;p&gt;This is a &lt;em&gt;raw&lt;/em&gt; output, for each record it receives a buffer containing the serialized record, plus a list holding a set of fields (&lt;code&gt;output.fields&lt;/code&gt; in TOML).&lt;/p&gt;
&lt;p&gt;Compute various distributions of the records it receives and dumps that to CSV.
It computes the distribution of record by size and the distribution of the values of certain fields&lt;/p&gt;
&lt;h3 id=&#34;configuration&#34;&gt;Configuration&lt;/h3&gt;
&lt;p&gt;Keys available in the &lt;code&gt;[output.config]&lt;/code&gt; section:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Name&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Type&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Default&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Required&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;CountEmptyFields&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;bool&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Whether fields with empty values are counted or not&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;CSVPath&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;string&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;ldquo;stats.csv&amp;rdquo;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Path of the CSV file to create&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;TimestampField&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;string&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;quot;&amp;quot;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Name of a field containing a POSIX timestamp (in seconds) used to build the times stats&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: WebSocket</title>
      <link>https://getbaker.io/docs/components/outputs/websocket/</link>
      <pubDate>Thu, 12 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://getbaker.io/docs/components/outputs/websocket/</guid>
      <description>
        
        
        &lt;h2 id=&#34;output-websocket&#34;&gt;Output &lt;em&gt;WebSocket&lt;/em&gt;&lt;/h2&gt;
&lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;
&lt;p&gt;This is a &lt;em&gt;non-raw&lt;/em&gt; output, it doesn&amp;rsquo;t receive whole records. Instead it receives a list of fields for each record (&lt;code&gt;output.fields&lt;/code&gt; in TOML).&lt;/p&gt;
&lt;p&gt;This output writes the filtered log lines into any connected WebSocket client.&lt;/p&gt;
&lt;h3 id=&#34;configuration&#34;&gt;Configuration&lt;/h3&gt;
&lt;p&gt;No configuration available&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: S3</title>
      <link>https://getbaker.io/docs/components/uploads/s3/</link>
      <pubDate>Thu, 12 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://getbaker.io/docs/components/uploads/s3/</guid>
      <description>
        
        
        &lt;h2 id=&#34;upload-s3&#34;&gt;Upload &lt;em&gt;S3&lt;/em&gt;&lt;/h2&gt;
&lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;
&lt;p&gt;S3Uploader uploads files to a destination on S3 that is relative to SourceBasePath&lt;/p&gt;
&lt;h3 id=&#34;configuration&#34;&gt;Configuration&lt;/h3&gt;
&lt;p&gt;Keys available in the &lt;code&gt;[upload.config]&lt;/code&gt; section:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Name&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Type&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Default&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Required&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;SourceBasePath&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;string&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;ldquo;/tmp/baker/ologs/&amp;rdquo;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Base path used to consider the final S3 path.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Region&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;string&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;ldquo;us-east-1&amp;rdquo;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;S3 region to upload to&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Bucket&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;string&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;quot;&amp;quot;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;true&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;S3 bucket to upload to&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Prefix&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;string&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;ldquo;/&amp;rdquo;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Prefix on the destination bucket&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;StagingPath&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;string&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;ldquo;/tmp/baker/ologs/staging/&amp;rdquo;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Local staging area to copy files to before upload.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Retries&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;int&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Number of retries before a failed upload&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Concurrency&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;int&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;5&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Number of concurrent workers&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Interval&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;duration&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;15s&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Period at which the source path is scanned&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ExitOnError&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;bool&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;false&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Exit at first error, instead of logging all errors&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Pipeline configuration</title>
      <link>https://getbaker.io/docs/how-tos/pipeline_configuration/</link>
      <pubDate>Thu, 29 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://getbaker.io/docs/how-tos/pipeline_configuration/</guid>
      <description>
        
        
        &lt;h3 id=&#34;configuration-file&#34;&gt;Configuration file&lt;/h3&gt;
&lt;p&gt;Baker is configured using a &lt;a href=&#34;https://toml.io/en/&#34;&gt;TOML file&lt;/a&gt;, whose content is processed by the
&lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/Baker#NewConfigFromToml&#34;&gt;&lt;code&gt;NewConfigFromToml&lt;/code&gt;&lt;/a&gt; function.&lt;/p&gt;
&lt;p&gt;The file has several sections, described below:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Section&lt;/th&gt;
&lt;th&gt;Required&lt;/th&gt;
&lt;th&gt;Content&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[general]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;General configuration&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[metrics]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;Metrics service configuration&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[[user]]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;Array of user-defined configurations&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[input]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;Input component configuration&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[[filter]]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;Array of filters configuration&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[output]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;Output component configuration&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[upload]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;Upload component configuration&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;general-configuration&#34;&gt;General configuration&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;[general]&lt;/code&gt; section is used to configure the general behaviour of Baker.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Effect&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;dont_validate_fields&lt;/td&gt;
&lt;td&gt;bool&lt;/td&gt;
&lt;td&gt;Reports whether records validation is skipped (by not calling Components.Validate)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;components-configuration&#34;&gt;Components configuration&lt;/h4&gt;
&lt;p&gt;Components sections are &lt;code&gt;[input]&lt;/code&gt;, &lt;code&gt;[[filter]]&lt;/code&gt;, &lt;code&gt;[output]&lt;/code&gt; and &lt;code&gt;[upload]&lt;/code&gt; and contain a
&lt;code&gt;name = &amp;quot;&amp;lt;component name&amp;gt;&amp;quot;&lt;/code&gt; line and an optional &lt;code&gt;config&lt;/code&gt; subsection (like &lt;code&gt;[input.config]&lt;/code&gt;)
to set specific configuration values to the selected component.&lt;/p&gt;
&lt;p&gt;Components&#39; specific configuration can be marked as required (within the component code). If a
required config is missing, Baker won&amp;rsquo;t start.&lt;/p&gt;
&lt;p&gt;This is a minimalist Baker configuration TOML, reading records from files (&lt;code&gt;List&lt;/code&gt;), applying the
&lt;code&gt;TimestampRange&lt;/code&gt; filter and writing the output to &lt;code&gt;DynamoDB&lt;/code&gt;, with some specific options:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;[input]
name=&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;List&amp;#34;&lt;/span&gt;

    [input.config]
    files=[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;records.csv.gz&amp;#34;&lt;/span&gt;]

[[filter]]
name=&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;TimestampRange&amp;#34;&lt;/span&gt;

    [filter.config]
    StartDatetime = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;2020-10-30 15:00:00&amp;#34;&lt;/span&gt;
	EndDatetime = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;2020-11-01 00:00:00&amp;#34;&lt;/span&gt;
	Field = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;timestamp&amp;#34;&lt;/span&gt;

[output]
name=&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;DynamoDB&amp;#34;&lt;/span&gt;
fields=[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;source&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;timestamp&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;user&amp;#34;&lt;/span&gt;]

    [output.config]
    regions=[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;us-west-2&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;us-east-1&amp;#34;&lt;/span&gt;]
    table=&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;MyTable&amp;#34;&lt;/span&gt;
    columns=[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;s:Source&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;n:Timestamp&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;s:User&amp;#34;&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;[input]&lt;/code&gt; selects the input component, or where to read the records from.&lt;br&gt;
In this case, the List component is selected, which is a component that fetches files from
a list of local or remote paths/URLs. &lt;code&gt;[input.config]&lt;/code&gt; is where component-specific configuration
can be specified, and in this case we simply provide the files option to List.&lt;br&gt;
Notice that List would accept http:// or even s3:// URLs there in addition to local paths,&lt;br&gt;
and some more (run ./Baker-bin -help List in the help example for more details).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[[filter]]&lt;/code&gt; In TOML syntax, the double brackets indicates an array of sections.&lt;br&gt;
This is where you declare the list of filters (i.e filter chain) to sequentially apply to your
records. As other components, each filter may be followed by a &lt;code&gt;[filter.config]&lt;/code&gt; section.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[output]&lt;/code&gt; selects the output component; the output is where records that made it to the end of
the filter chain without being discarded end up. In this case, the &lt;code&gt;DynamoDB&lt;/code&gt; output is selected,
and its configuration is specified in &lt;code&gt;[output.config]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;fields&lt;/code&gt; option in the &lt;code&gt;[output]&lt;/code&gt; section selects which fields of the record are sent
to the output.&lt;br&gt;
In fact, most pipelines don&amp;rsquo;t want to send the full records to the output, but they select
a few important fields out of the many available fields.&lt;br&gt;
Notice that this is just a selection: it is up to the output component to decide how to
physically serialize those fields. For instance, the &lt;code&gt;DynamoDB&lt;/code&gt; component requires the user
to specify an option called columns that specifies the name and the type of the column where
the fields are written.&lt;/p&gt;
&lt;h4 id=&#34;metrics-configuration&#34;&gt;Metrics configuration&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;[metrics]&lt;/code&gt; section allows to configure the metrics backend to use. Currently, only &lt;code&gt;datadog&lt;/code&gt; is
supported.&lt;/p&gt;
&lt;p&gt;See the dedicated page to learn how to configure DataDog metrics with Baker. (TODO: add link)&lt;/p&gt;
&lt;h4 id=&#34;user-defined-configurations&#34;&gt;User defined configurations&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;baker.NewConfigFromToml&lt;/code&gt; function, used by Baker to parse the TOML configuration file, can be
also used to add custom configurations to the TOML file (useful as Baker can be used as library in
a more complex project).&lt;/p&gt;
&lt;p&gt;This is an example of a TOML file defining also some of those user defined configurations (along
with the input and output configurations):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;[input]
name=&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;random&amp;#34;&lt;/span&gt;

[output]
name=&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;recorder&amp;#34;&lt;/span&gt;

[[user]]
name=&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;MyConfiG&amp;#34;&lt;/span&gt;

	[user.config]
	field1 = &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;
	field2 = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;hello!&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Using &lt;code&gt;NewConfigFromToml&lt;/code&gt; is then possible to retrieve those configurations:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;cfg &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; strings.&lt;span style=&#34;color:#50fa7b&#34;&gt;NewReader&lt;/span&gt;(toml) &lt;span style=&#34;color:#6272a4&#34;&gt;// toml is the content of the toml file
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#6272a4&#34;&gt;// myConfig contains the user-defined configurations we expect from the toml file
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; myConfig &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;struct&lt;/span&gt; {
    Field1 &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt;
    Field2 &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;
}
mycfg &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; myConfig{}

&lt;span style=&#34;color:#6272a4&#34;&gt;// comp is the baker components configuration.
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Here we use Inputs and Outputs in addition to User because
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// they are required configurations
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;comp &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; baker.Components{
    Inputs:  []baker.InputDesc{inputtest.RandomDesc},
    Outputs: []baker.OutputDesc{outputtest.RecorderDesc},
    User:    []baker.UserDesc{{Name: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;myconfig&amp;#34;&lt;/span&gt;, Config: &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;mycfg}},
}

&lt;span style=&#34;color:#6272a4&#34;&gt;// Use baker to parse and ingest the configuration file
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;baker.&lt;span style=&#34;color:#50fa7b&#34;&gt;NewConfigFromToml&lt;/span&gt;(cfg, comp)

&lt;span style=&#34;color:#6272a4&#34;&gt;// Now mycfg has been populated with the user defined configurations:
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// myConfig{Field1: 1, Field2: &amp;#34;hello!&amp;#34;}
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// and can be used anywhere in the program
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;More examples can be found in the
&lt;a href=&#34;https://github.com/AdRoll/baker/blob/main/user_config_test.go&#34;&gt;dedicated test file&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;environment-variables-replacement&#34;&gt;Environment variables replacement&lt;/h3&gt;
&lt;p&gt;Baker supports environment variables replacement in the configuration file.&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;${ENV_VAR_NAME}&lt;/code&gt; or &lt;code&gt;$ENV_VAR_NAME&lt;/code&gt; and the value in the file is replaced at runtime.&lt;br&gt;
Note that if the variable doesn&amp;rsquo;t exist, then an empty string is used for replacement.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Record and LogLine</title>
      <link>https://getbaker.io/docs/how-tos/record_and_logline/</link>
      <pubDate>Thu, 29 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://getbaker.io/docs/how-tos/record_and_logline/</guid>
      <description>
        
        
        &lt;p&gt;Baker processes objects in form of &amp;ldquo;records&amp;rdquo;. A Record, in Baker, is an interface that
provides an abstraction over a record of flattened data, where columns of fields are
indexed through integers.&lt;/p&gt;
&lt;p&gt;Baker currently provides a single implementation of Record, called &lt;code&gt;LogLine&lt;/code&gt; (
&lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#LogLine&#34;&gt;API reference&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;LogLine&lt;/code&gt; doesn&amp;rsquo;t fit your needs, you can easily implement the Record interface with your
&lt;a href=&#34;#custom-logline&#34;&gt;custom logic&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;logline&#34;&gt;LogLine&lt;/h2&gt;
&lt;p&gt;A &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#LogLine&#34;&gt;&lt;code&gt;LogLine&lt;/code&gt;&lt;/a&gt; is a Record implementation which is highly optimized for fast parsing and serializing of CSV records.&lt;/p&gt;
&lt;p&gt;It supports any single-byte field separator and doesn&amp;rsquo;t handle quotes (neither single nor double).&lt;/p&gt;
&lt;p&gt;The maximum number of fields is hard-coded by the &lt;code&gt;LogLineNumFields&lt;/code&gt; constant which is 3000.&lt;/p&gt;
&lt;p&gt;100 extra fields can be stored at runtime in a &lt;code&gt;LogLine&lt;/code&gt; (also hardcoded with &lt;code&gt;NumFieldsBaker&lt;/code&gt;),
these extra fields are a fast way to exchange data between filters and/or outputs but they are
neither handled during Parsing (i.e &lt;code&gt;LogLine.Parse&lt;/code&gt;) nor serialization (&lt;code&gt;LogLine.ToText&lt;/code&gt;).&lt;/p&gt;
&lt;h3 id=&#34;custom-logline&#34;&gt;Custom LogLine&lt;/h3&gt;
&lt;p&gt;If the hardcoded values for
&lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#pkg-constants&#34;&gt;&lt;code&gt;LogLineNumFields&lt;/code&gt; and &lt;code&gt;NumFieldsBaker&lt;/code&gt;&lt;/a&gt;
do not suit your needs, it&amp;rsquo;s advised that you copy &lt;code&gt;logline.go&lt;/code&gt; in your project and modify the
constants declared at the top of the file.&lt;/p&gt;
&lt;p&gt;Your specialized &lt;code&gt;LogLine&lt;/code&gt; will still implement &lt;code&gt;baker.Record&lt;/code&gt; and thus can be used in lieu
of &lt;code&gt;baker.LogLine&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;CreateRecord&lt;/code&gt; function set into
&lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#Components&#34;&gt;&lt;code&gt;baker.Components&lt;/code&gt;&lt;/a&gt; must return an
instance of your custom LogLine instead of the default one.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Create a custom Record</title>
      <link>https://getbaker.io/docs/how-tos/custom_record/</link>
      <pubDate>Thu, 29 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://getbaker.io/docs/how-tos/custom_record/</guid>
      <description>
        
        
        &lt;p&gt;As you can read in the &lt;a href=&#34;https://getbaker.io/docs/core-concepts/record_implementation/&#34;&gt;Record and LogLine page&lt;/a&gt;,
Baker processes objects in form of “records”.&lt;/p&gt;
&lt;p&gt;A &lt;code&gt;Record&lt;/code&gt;, in Baker, is an interface that provides an abstraction over a record of flattened data,
where columns of fields are indexed through integers.&lt;/p&gt;
&lt;p&gt;If the Record implementations provided by Baker doesn&amp;rsquo;t fit your needs, you can create your own
version of the Record, implementing the
&lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#Record&#34;&gt;&lt;code&gt;Record&lt;/code&gt; inteface&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;how-to-use-a-custom-version-of-the-record&#34;&gt;How to use a custom version of the Record&lt;/h2&gt;
&lt;p&gt;Once your Record version is ready, you need to use it in your code.&lt;/p&gt;
&lt;p&gt;In order to do so, some functions may be implemented while instantiating
&lt;a href=&#34;https://getbaker.io/docs/how-to/baker_components/&#34;&gt;&lt;code&gt;baker.Components&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; Components &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;struct&lt;/span&gt; {
	Validate      ValidationFunc
    CreateRecord  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt;() Record
    FieldByName &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;) (FieldIndex, &lt;span style=&#34;color:#8be9fd&#34;&gt;bool&lt;/span&gt;)
    FieldName   &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt;(FieldIndex) &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;
    &lt;span style=&#34;color:#6272a4&#34;&gt;//... other functions
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;validate&#34;&gt;Validate&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Validate&lt;/code&gt; is the function used to validate a record. It is called for each processed record
unless not set or when the &lt;code&gt;[general] dont_validate_fields = true&lt;/code&gt; configuration is set in
the TOML file.&lt;/p&gt;
&lt;p&gt;Regardless of the TOML configuration, the function is passed to all components that can use
it at their will.&lt;/p&gt;
&lt;h3 id=&#34;createrecord&#34;&gt;CreateRecord&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;CreateRecord&lt;/code&gt; is the function that creates a new record. If not set, a default function is
used that creates a &lt;code&gt;LogLine&lt;/code&gt; with &lt;code&gt;,&lt;/code&gt; as field separator.&lt;/p&gt;
&lt;p&gt;The function is used internally by Baker to create new records every time a new one comes from
the input.&lt;/p&gt;
&lt;p&gt;The function is also passed to components that can use it to create new records while processing.&lt;/p&gt;
&lt;h3 id=&#34;fieldbyname&#34;&gt;FieldByName&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;FieldByName&lt;/code&gt; gets a field index by its name. The function is mainly used by the components
(that receive it during setup) to retrieve the index of a field they need for filtering or
processing, but it is also used internally by Baker when sending fields to the output
(when at least one field is selected in the output TOML configuration).&lt;/p&gt;
&lt;h3 id=&#34;fieldindex&#34;&gt;FieldIndex&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;FieldName&lt;/code&gt; gets a field name by its index. The function is passed to components that can use
it for their internal logic.&lt;/p&gt;
&lt;h2 id=&#34;recordconformancetest&#34;&gt;RecordConformanceTest&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;test_helper.go&lt;/code&gt; provides a &lt;code&gt;RecordConformanceTest&lt;/code&gt; test helper whose goal is to give the
user a structured test for new implementations of the Record.&lt;/p&gt;
&lt;p&gt;The helper receives the implementation of &lt;code&gt;CreateRecord&lt;/code&gt; and creates new records testing
them against a set of requirements.&lt;/p&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Warning&lt;/h4&gt;
The conformance test provides a way to verify that a record implementation respects the
invariant that Baker requires for a Record implementation and thus it should always
be executed against all custom implementations of the Record.
&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>Docs: Basic: build a simple pipeline</title>
      <link>https://getbaker.io/docs/tutorials/basic/</link>
      <pubDate>Fri, 13 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://getbaker.io/docs/tutorials/basic/</guid>
      <description>
        
        
        &lt;p&gt;In this tutorial you&amp;rsquo;ll learn how to create a Baker-based program to process a given dataset
(in CSV format), filter records based on your needs and save the result to S3.&lt;/p&gt;
&lt;p&gt;The dataset we&amp;rsquo;re going to use is an open dataset containing ratings on many
&lt;a href=&#34;https://www.kaggle.com/residentmario/ramen-ratings&#34;&gt;Ramens&lt;/a&gt;, the famous japanese noodle soup!&lt;/p&gt;
&lt;p&gt;Our goal is to discard all ramens that have never been on a top-ten ranking, split the
results into multiple folders named after the ramens source countries, and upload the
resulting lists to S3.&lt;/p&gt;
&lt;h2 id=&#34;the-dataset&#34;&gt;The dataset&lt;/h2&gt;
&lt;p&gt;The dataset file has 7 columns:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;review_num&lt;/strong&gt;: the number of the review (higher numbers mean more recent reviews)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;brand&lt;/strong&gt;: the name of the restaurant&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;variety&lt;/strong&gt;: the name of the recipe&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;style&lt;/strong&gt;: the type of the ramen (cup, pack, bowl, etc)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;country&lt;/strong&gt;: self-explanatory&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;stars&lt;/strong&gt;: ratings stars (from 0 to 5)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;top_ten&lt;/strong&gt;: whether the ramen has been included in a top-ten ranking&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Warning&lt;/h4&gt;
&lt;p&gt;The &lt;a href=&#34;https://www.kaggle.com/residentmario/ramen-ratings&#34;&gt;original CSV file&lt;/a&gt; can&amp;rsquo;t be immediately
used with Baker because:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;it includes a header row&lt;/li&gt;
&lt;li&gt;some fields have values with commas and thus are enclosed in double-quotes. Baker doesn&amp;rsquo;t support it&lt;/li&gt;
&lt;li&gt;the file is uncompressed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For the purpose of this tutorial we&amp;rsquo;ve already prepared the final file for you and &lt;strong&gt;it is
available for downloading &lt;a href=&#34;https://getbaker.io/tutorial-base-dataset.csv.gz&#34;&gt;here&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;/div&gt;

&lt;h2 id=&#34;the-required-components&#34;&gt;The required components&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://getbaker.io/docs/components/inputs/list/&#34;&gt;&lt;code&gt;List&lt;/code&gt;&lt;/a&gt;: reads the input file from disk&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://getbaker.io/docs/components/filters/notnull/&#34;&gt;&lt;code&gt;NotNull&lt;/code&gt;&lt;/a&gt;: discards all ramens without a top-ten entry&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://getbaker.io/docs/components/outputs/filewriter/&#34;&gt;&lt;code&gt;FileWriter&lt;/code&gt;&lt;/a&gt;: saves the resulting file to disk&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://getbaker.io/docs/components/uploads/s3/&#34;&gt;&lt;code&gt;S3&lt;/code&gt;&lt;/a&gt;: uploads the file to S3&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;baker-configuration&#34;&gt;Baker configuration&lt;/h2&gt;
&lt;p&gt;An essential thing to do is to create a configuration file for Baker, in
&lt;a href=&#34;https://github.com/toml-lang/toml&#34;&gt;TOML&lt;/a&gt; format, selecting the aforementioned components:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;[fields]
names = [&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;review_num&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;brand&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;variety&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;style&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;country&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;stars&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;top_ten&amp;#34;&lt;/span&gt;]

[input]
name = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;List&amp;#34;&lt;/span&gt;

    [input.config]
    Files = [&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;/tmp/db.csv.gz&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#6272a4&#34;&gt;# put the file wherever you like&lt;/span&gt;

[[filter]]
name = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;NotNull&amp;#34;&lt;/span&gt;

    [filter.config]
    Fields = [&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;top_ten&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#6272a4&#34;&gt;# discard all records with an empty top_ten field&lt;/span&gt;

[output]
name = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;FileWriter&amp;#34;&lt;/span&gt;
procs = &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#6272a4&#34;&gt;# With our PathString, FileWriter doesn&amp;#39;t support concurrency&lt;/span&gt;
fields = [&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;country&amp;#34;&lt;/span&gt;]

    [output.config]
    PathString = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;/tmp/out/{{.Field0}}/ramens.csv.gz&amp;#34;&lt;/span&gt;

[upload]
name=&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;S3&amp;#34;&lt;/span&gt;

    [upload.config]
    Region = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;us-east-1&amp;#34;&lt;/span&gt;
    Bucket = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;myBucket&amp;#34;&lt;/span&gt;
    Prefix = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;ramens/&amp;#34;&lt;/span&gt;
    StagingPath = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;/tmp/staging/&amp;#34;&lt;/span&gt;
    SourceBasePath = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;/tmp/out/&amp;#34;&lt;/span&gt;
    Interval = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;60s&amp;#34;&lt;/span&gt;
    ExitOnError = &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;create-the-program&#34;&gt;Create the program&lt;/h2&gt;
&lt;p&gt;Baker is a Go library. To use it, it is required to create a Go &lt;code&gt;main()&lt;/code&gt; function,
&lt;a href=&#34;https://getbaker.io/docs/how-tos/baker_components/&#34;&gt;define a &lt;code&gt;baker.Components&lt;/code&gt;&lt;/a&gt; object and pass it to
&lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#MainCLI&#34;&gt;&lt;code&gt;baker.MainCLI()&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;log&amp;#34;&lt;/span&gt;

    &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;github.com/AdRoll/baker&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;main&lt;/span&gt;() {
    components &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; baker.Components{&lt;span style=&#34;color:#6272a4&#34;&gt;/* define components */&lt;/span&gt;}
    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; baker.&lt;span style=&#34;color:#50fa7b&#34;&gt;MainCLI&lt;/span&gt;(components); err &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; {
		log.&lt;span style=&#34;color:#50fa7b&#34;&gt;Fatal&lt;/span&gt;(err)
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;define-bakercomponents&#34;&gt;Define baker.Components&lt;/h3&gt;
&lt;p&gt;The only required fields in &lt;code&gt;baker.Components&lt;/code&gt; are the components that we need to use (the complete
guide to &lt;code&gt;baker.Components&lt;/code&gt; is &lt;a href=&#34;https://getbaker.io/docs/how-tos/baker_components/&#34;&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The simplest and more generic way to add the components to Baker is to add all of them:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;components &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; baker.Components{
    Inputs:      input.All,
    Filters:     filter.All,
    Outputs:     output.All,
    Uploads:     upload.All,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The complete program (that is available in the
&lt;a href=&#34;https://github.com/AdRoll/baker/blob/main/tutorials/basic/main.go&#34;&gt;&lt;code&gt;tutorials/&lt;/code&gt; folder&lt;/a&gt; in
the Baker repository) is the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;log&amp;#34;&lt;/span&gt;

    &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;github.com/AdRoll/baker&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;github.com/AdRoll/baker/input&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;github.com/AdRoll/baker/filter&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;github.com/AdRoll/baker/output&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;github.com/AdRoll/baker/upload&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; baker.&lt;span style=&#34;color:#50fa7b&#34;&gt;MainCLI&lt;/span&gt;(baker.Components{
        Inputs:      input.All,
        Filters:     filter.All,
        Outputs:     output.All,
        Uploads:     upload.All,
    }); err &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; {
		log.&lt;span style=&#34;color:#50fa7b&#34;&gt;Fatal&lt;/span&gt;(err)
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;run-the-program&#34;&gt;Run the program&lt;/h2&gt;
&lt;p&gt;Once the code and the configuration files are ready, we can run the topology:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ go build -o myProgram ./main.go 
&lt;span style=&#34;color:#6272a4&#34;&gt;# Test it works as expected&lt;/span&gt;
$ ./myProgram -help
&lt;span style=&#34;color:#6272a4&#34;&gt;# run the topology&lt;/span&gt;
$ ./myProgram topology.toml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Among the messages that Baker prints on stdout, the stats messages are particularly interesting:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;Stats: 1s&lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;w:0 r:0&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt; total&lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;w:41 r:2584 u:11&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt; speed&lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;w:20 r:1292&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt; errors&lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;p:0 i:0 f:2543 o:0 u:0&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Take a look at the &lt;a href=&#34;https://getbaker.io/docs/how-tos/read_stats/&#34;&gt;dedicated page&lt;/a&gt; to learn how to read the values.&lt;/p&gt;
&lt;h2 id=&#34;verify-the-result&#34;&gt;Verify the result&lt;/h2&gt;
&lt;p&gt;The resulting files are split into multiple folders, one for each country, and then uploaded.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://getbaker.io/docs/components/uploads/s3/&#34;&gt;&lt;code&gt;S3&lt;/code&gt;&lt;/a&gt; upload removes the files from the local disk once uploaded,
so you&amp;rsquo;ll only find empty directories in the output destination folder:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;~ ls -l /tmp/out/
drwxrwxr-x   - username &lt;span style=&#34;color:#bd93f9&#34;&gt;16&lt;/span&gt; Nov 11:43 China
drwxrwxr-x   - username &lt;span style=&#34;color:#bd93f9&#34;&gt;16&lt;/span&gt; Nov 11:43 Hong Kong
drwxrwxr-x   - username &lt;span style=&#34;color:#bd93f9&#34;&gt;16&lt;/span&gt; Nov 11:43 Indonesia
drwxrwxr-x   - username &lt;span style=&#34;color:#bd93f9&#34;&gt;16&lt;/span&gt; Nov 11:43 Japan
drwxrwxr-x   - username &lt;span style=&#34;color:#bd93f9&#34;&gt;16&lt;/span&gt; Nov 11:43 Malaysia
drwxrwxr-x   - username &lt;span style=&#34;color:#bd93f9&#34;&gt;16&lt;/span&gt; Nov 11:43 Myanmar
drwxrwxr-x   - username &lt;span style=&#34;color:#bd93f9&#34;&gt;16&lt;/span&gt; Nov 11:43 Singapore
drwxrwxr-x   - username &lt;span style=&#34;color:#bd93f9&#34;&gt;16&lt;/span&gt; Nov 11:43 South Korea
drwxrwxr-x   - username &lt;span style=&#34;color:#bd93f9&#34;&gt;16&lt;/span&gt; Nov 11:43 Taiwan
drwxrwxr-x   - username &lt;span style=&#34;color:#bd93f9&#34;&gt;16&lt;/span&gt; Nov 11:43 Thailand
drwxrwxr-x   - username &lt;span style=&#34;color:#bd93f9&#34;&gt;16&lt;/span&gt; Nov 11:43 USA
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The files have been uploaded to S3:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;~ aws s3 ls --recursive s3://myBucket/ramens/
2020-11-16 11:43:59        &lt;span style=&#34;color:#bd93f9&#34;&gt;115&lt;/span&gt; ramens/China/ramens.csv.gz
2020-11-16 11:43:59         &lt;span style=&#34;color:#bd93f9&#34;&gt;83&lt;/span&gt; ramens/Hong Kong/ramens.csv.gz
2020-11-16 11:43:59        &lt;span style=&#34;color:#bd93f9&#34;&gt;223&lt;/span&gt; ramens/Indonesia/ramens.csv.gz
2020-11-16 11:43:59        &lt;span style=&#34;color:#bd93f9&#34;&gt;236&lt;/span&gt; ramens/Japan/ramens.csv.gz
2020-11-16 11:43:59        &lt;span style=&#34;color:#bd93f9&#34;&gt;240&lt;/span&gt; ramens/Malaysia/ramens.csv.gz
2020-11-16 11:43:59         &lt;span style=&#34;color:#bd93f9&#34;&gt;99&lt;/span&gt; ramens/Myanmar/ramens.csv.gz
2020-11-16 11:43:59        &lt;span style=&#34;color:#bd93f9&#34;&gt;219&lt;/span&gt; ramens/Singapore/ramens.csv.gz
2020-11-16 11:43:59        &lt;span style=&#34;color:#bd93f9&#34;&gt;265&lt;/span&gt; ramens/South Korea/ramens.csv.gz
2020-11-16 11:43:59        &lt;span style=&#34;color:#bd93f9&#34;&gt;159&lt;/span&gt; ramens/Taiwan/ramens.csv.gz
2020-11-16 11:43:59        &lt;span style=&#34;color:#bd93f9&#34;&gt;181&lt;/span&gt; ramens/Thailand/ramens.csv.gz
2020-11-16 11:43:59         &lt;span style=&#34;color:#bd93f9&#34;&gt;94&lt;/span&gt; ramens/USA/ramens.csv.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This is it for this basic tutorial. You have learned:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;how to create a simple Baker program to process a CSV dataset with minimal filtering and
upload the results to S3&lt;/li&gt;
&lt;li&gt;how to create the Baker TOML configuration file&lt;/li&gt;
&lt;li&gt;how to execute the program and verify the result&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can now improve your Baker knowledge by taking a look at the &lt;a href=&#34;https://getbaker.io/docs/tutorials/&#34;&gt;other tutorials&lt;/a&gt;
and learning more &lt;a href=&#34;https://getbaker.io/docs/how-tos/&#34;&gt;advanced topics&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Create baker.Components</title>
      <link>https://getbaker.io/docs/how-tos/baker_components/</link>
      <pubDate>Thu, 29 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://getbaker.io/docs/how-tos/baker_components/</guid>
      <description>
        
        
        &lt;p&gt;To create a Topology, Baker requires 2 elements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;baker.Components&lt;/code&gt; describes the list of components Baker can use in topologies&lt;/li&gt;
&lt;li&gt;a TOML configuration that specifically describes a single topology, using components from 1)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The next paragraphs gives you a high level overview of each section of &lt;code&gt;baker.Components&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To get a deeper understanding, read the
&lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#Components&#34;&gt;full API reference for &lt;code&gt;baker.Components&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;inputs-filters-outputs-and-uploads&#34;&gt;Inputs, Filters, Outputs and Uploads&lt;/h2&gt;
&lt;p&gt;These fields contain the list of components that are available to the topology.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://getbaker.io/docs/core-concepts/toml/&#34;&gt;TOML configuration file&lt;/a&gt; must specify components that are
present in these lists.&lt;/p&gt;
&lt;p&gt;All components already available to Baker or custom components can be set here.&lt;/p&gt;
&lt;p&gt;The following is an example of &lt;code&gt;baker.Components&lt;/code&gt; configuration where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;inputs&lt;/strong&gt; and &lt;strong&gt;uploads&lt;/strong&gt; are those already included into Baker&lt;/li&gt;
&lt;li&gt;only a custom &lt;strong&gt;filter&lt;/strong&gt; is set&lt;/li&gt;
&lt;li&gt;a custom &lt;strong&gt;output&lt;/strong&gt; is added to the outputs included into Baker&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;github.com/AdRoll/baker&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;github.com/AdRoll/baker/input&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;github.com/AdRoll/baker/output&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;github.com/AdRoll/baker/upload&amp;#34;&lt;/span&gt;
)

comp &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; baker.Components{
    Inputs:        input.All,
    Filters:       []baker.FilterDesc{MyCustomFilterDesc},
	Outputs:       &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;append&lt;/span&gt;(output.All, MyCustomOutputDesc&lt;span style=&#34;color:#ff79c6&#34;&gt;...&lt;/span&gt;),
	Uploads:       upload.All,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;metrics&#34;&gt;Metrics&lt;/h2&gt;
&lt;p&gt;The list of available metrics backends.&lt;/p&gt;
&lt;p&gt;This list can contain a metric backend already included into Baker or a custom implementation
of the &lt;code&gt;baker.MetricsClient&lt;/code&gt; interface.&lt;/p&gt;
&lt;p&gt;For details about metrics, &lt;a href=&#34;https://getbaker.io/docs/core-concepts/metrics&#34;&gt;see the dedicated page&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;user&#34;&gt;User&lt;/h2&gt;
&lt;p&gt;This field contains a list of user-defined configurations structures that are not strictly
useful to Baker but that users can add to Baker TOML file and use for other purposes.&lt;/p&gt;
&lt;p&gt;To learn more about this topic, read the
&lt;a href=&#34;https://getbaker.io/docs/core-concepts/toml/#user-defined-configurations&#34;&gt;dedicated section&lt;/a&gt; in the Pipeline
configuration page.&lt;/p&gt;
&lt;h2 id=&#34;shardingfuncs&#34;&gt;ShardingFuncs&lt;/h2&gt;
&lt;p&gt;This field holds a dictionary associating field indices to hash functions. When sharding
is enabled, these hash functions are used to determine which shard a record is sent to.&lt;/p&gt;
&lt;h2 id=&#34;validate&#34;&gt;Validate&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Validate&lt;/code&gt; is the function used to validate a record. It is called for each processed record
unless &lt;code&gt;nil&lt;/code&gt; or when &lt;code&gt;[general.dont_validate_fields]&lt;/code&gt; configuration is set to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Regardless of the TOML configuration, the function is passed to all components that can use
it at their will.&lt;/p&gt;
&lt;h2 id=&#34;createrecord&#34;&gt;CreateRecord&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;CreateRecord&lt;/code&gt; is the function that creates a new record. If not set, a default function is
used that creates a &lt;code&gt;LogLine&lt;/code&gt; with the &lt;strong&gt;comma&lt;/strong&gt; field separator.&lt;/p&gt;
&lt;p&gt;The function is used internally by Baker to create new records every time a new byte buffer enters
the filter chain.&lt;/p&gt;
&lt;p&gt;The function is also passed to components that can use it to create new records while processing.&lt;/p&gt;
&lt;h2 id=&#34;fieldbyname&#34;&gt;FieldByName&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;FieldByName&lt;/code&gt; returns a field index from its name.&lt;/p&gt;
&lt;p&gt;The function is mainly used by the components (that receive it during setup) to retrieve the
index of a field they need for filtering or processing, but it is also used internally by
Baker when sending fields to the output (when at least one field is selected in the output
TOML configuration).&lt;/p&gt;
&lt;h2 id=&#34;fieldname&#34;&gt;FieldName&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;FieldName&lt;/code&gt; returns a field name from its index.&lt;/p&gt;
&lt;p&gt;The function is passed to components that can use it internally.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Create a custom input component</title>
      <link>https://getbaker.io/docs/how-tos/create_input/</link>
      <pubDate>Mon, 02 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://getbaker.io/docs/how-tos/create_input/</guid>
      <description>
        
        
        &lt;p&gt;The job of a Baker input is to fetch blob of data containing one or multiple serialized records
and send them to Baker.&lt;/p&gt;
&lt;p&gt;The input isn&amp;rsquo;t in charge of splitting/parsing the input data into Records (that is done by Baker),
but only retrieving them as fast as possible in raw format adding, if any, metadata to them and
then sending those values to Baker through a
&lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#Data&#34;&gt;&lt;code&gt;*Data&lt;/code&gt;&lt;/a&gt; channel. The channel size is
customizable in the topology TOML with &lt;code&gt;[input] chansize=&amp;lt;value&amp;gt;&lt;/code&gt; (default to 1024).&lt;/p&gt;
&lt;p&gt;To create an input and make it available to Baker, one must:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Implement the &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#Input&#34;&gt;Input&lt;/a&gt; interface&lt;/li&gt;
&lt;li&gt;Fill an &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#InputDesc&#34;&gt;&lt;code&gt;InputDesc&lt;/code&gt;&lt;/a&gt; structure and register it
within Baker via &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#Components&#34;&gt;&lt;code&gt;Components&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;daemon-vs-batch&#34;&gt;Daemon vs Batch&lt;/h2&gt;
&lt;p&gt;The input component determines the Baker behavior between a batch processor or a long-living daemon.&lt;/p&gt;
&lt;p&gt;If the input exits when its data processing has completed, then Baker waits for the topology to end
and then exits.&lt;/p&gt;
&lt;p&gt;If the input never exits, then Baker acts as a daemon.&lt;/p&gt;
&lt;h2 id=&#34;data&#34;&gt;Data&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#Data&#34;&gt;&lt;code&gt;Data&lt;/code&gt;&lt;/a&gt; object that the input must fill in
with read data has two fields: &lt;code&gt;Bytes&lt;/code&gt;, that must contain the raw read bytes (possibly containing
more records separated by &lt;code&gt;\n&lt;/code&gt;), and &lt;code&gt;Meta&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#Metadata&#34;&gt;&lt;code&gt;Metadata&lt;/code&gt;&lt;/a&gt; can contain additional
information Baker will associate with each of the serialized Record contained in &lt;code&gt;Data&lt;/code&gt;.&lt;br&gt;
Typical information could be the time of retrieval, the filename (in case &lt;code&gt;Records&lt;/code&gt; come from a file), etc.&lt;/p&gt;
&lt;h2 id=&#34;the-input-interface&#34;&gt;The Input interface&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; Input &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;interface&lt;/span&gt; {
	&lt;span style=&#34;color:#50fa7b&#34;&gt;Run&lt;/span&gt;(output &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;chan&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;Data) &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt;
	&lt;span style=&#34;color:#50fa7b&#34;&gt;Stop&lt;/span&gt;()
	&lt;span style=&#34;color:#50fa7b&#34;&gt;Stats&lt;/span&gt;() InputStats
	&lt;span style=&#34;color:#50fa7b&#34;&gt;FreeMem&lt;/span&gt;(data &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;Data)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#Input&#34;&gt;Input interface&lt;/a&gt; must be implemented when
creating a new input component.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Run&lt;/code&gt; function implements the component logic and receives a channel where it sends the
&lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#Data&#34;&gt;raw data&lt;/a&gt; it processes.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;FreeMem(data *Data)&lt;/code&gt; is called by Baker when &lt;code&gt;data&lt;/code&gt; is no longer needed. This is an occasion
for the input to recycle memory, for example if the input uses a &lt;code&gt;sync.Pool&lt;/code&gt; to create new
instances of &lt;code&gt;baker.Data&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;inputdesc&#34;&gt;InputDesc&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; MyInputDesc = baker.InputDesc{
	Name:   &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;MyInput&amp;#34;&lt;/span&gt;,
	New:    NewMyInput,
	Config: &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;MyInputConfig{},
	Help:   &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;High-level description of MyInput&amp;#34;&lt;/span&gt;,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This object has a &lt;code&gt;Name&lt;/code&gt;, that is used in the Baker configuration file to identify the input,
a costructor-like function (&lt;code&gt;New&lt;/code&gt;), a config object (where the parsed input configuration from the
TOML file is stored) and a help text that must help the users to use the component and its
configuration parameters.&lt;/p&gt;
&lt;h3 id=&#34;input-constructor-like-function&#34;&gt;Input constructor-like function&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;New&lt;/code&gt; key in the &lt;code&gt;InputDesc&lt;/code&gt; object represents the constructor-like function.&lt;/p&gt;
&lt;p&gt;The function receives a &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#InputParams&#34;&gt;InputParams&lt;/a&gt;
object and returns an instance of &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#Input&#34;&gt;Input&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The function should verify the configuration params into &lt;code&gt;InputParams.DecodedConfig&lt;/code&gt; and initialize
the component.&lt;/p&gt;
&lt;h3 id=&#34;the-input-configuration-and-help&#34;&gt;The input configuration and help&lt;/h3&gt;
&lt;p&gt;The input configuration object (&lt;code&gt;MyInputConfig&lt;/code&gt; in the previous example) must export all
configuration parameters that the user can set in the TOML topology file.&lt;/p&gt;
&lt;p&gt;Each field in the struct must include a &lt;code&gt;help&lt;/code&gt; string tag (mandatory) and a &lt;code&gt;required&lt;/code&gt; boolean tag
(default to &lt;code&gt;false&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;All these parameters appear in the generated help. &lt;code&gt;help&lt;/code&gt; should describe the parameter role and/or
its possible values, &lt;code&gt;required&lt;/code&gt; informs Baker it should refuse configurations in which that field
is not defined.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Create a custom filter component</title>
      <link>https://getbaker.io/docs/how-tos/create_filter/</link>
      <pubDate>Mon, 02 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://getbaker.io/docs/how-tos/create_filter/</guid>
      <description>
        
        
        &lt;p&gt;Creating a custom filter is probably the most common action a Baker user will perform.&lt;/p&gt;
&lt;p&gt;In fact, filters are the components that apply the business logic to a Baker pipeline,
&lt;strong&gt;creating or discarding records or modifying fields.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A working example of a custom filter can be found in the
&lt;a href=&#34;https://github.com/AdRoll/baker/tree/main/examples/filtering&#34;&gt;filtering example&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To create a filter and make it available to Baker, one must:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Implement the Filter interface&lt;/li&gt;
&lt;li&gt;Add a &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#FilterDesc&#34;&gt;&lt;code&gt;FilterDesc&lt;/code&gt;&lt;/a&gt; for the filter to
the available filters in &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#Components&#34;&gt;&lt;code&gt;Components&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;the-filter-interface&#34;&gt;The Filter interface&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#Filter&#34;&gt;Filter interface&lt;/a&gt; determines the functions
that a filter must implement. The interface is quite simple and contains only two functions:
&lt;code&gt;Process(l Record, next func(Record))&lt;/code&gt; and &lt;code&gt;Stats() FilterStats&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Process&lt;/code&gt; is the function the actually filters the records&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Stats&lt;/code&gt; return statistics (&lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#FilterStats&#34;&gt;FilterStats&lt;/a&gt;) about the filtering process&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A very simple example of filter doing nothing is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; MyFilter &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;struct&lt;/span&gt;{
    numProcessedLines &lt;span style=&#34;color:#8be9fd&#34;&gt;int64&lt;/span&gt;
}

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; (f &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;MyFilter) &lt;span style=&#34;color:#50fa7b&#34;&gt;Process&lt;/span&gt;(r Record, next &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt;(Record)) {
    atomic.&lt;span style=&#34;color:#50fa7b&#34;&gt;AddInt64&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;f.numProcessedLines, &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#50fa7b&#34;&gt;next&lt;/span&gt;(r)
}

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; (f &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;MyFilter) &lt;span style=&#34;color:#50fa7b&#34;&gt;Stats&lt;/span&gt;() FilterStats { 
    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; baker.FilterStats{
		NumProcessedLines: atomic.&lt;span style=&#34;color:#50fa7b&#34;&gt;LoadInt64&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;f.numProcessedLines),
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;filterdesc&#34;&gt;FilterDesc&lt;/h2&gt;
&lt;p&gt;To be included in the Baker filters, a filter must be described by a
&lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#FilterDesc&#34;&gt;&lt;code&gt;FilterDesc&lt;/code&gt; object&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; MyFilterDesc = baker.FilterDesc{
	Name:   &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;MyFilter&amp;#34;&lt;/span&gt;,
	New:    NewMyFilter,
	Config: &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;MyFilterConfig{},
	Help:   &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;This filter does nothing, but in a great way!&amp;#34;&lt;/span&gt;,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This object has a &lt;code&gt;Name&lt;/code&gt;, that is used in the Baker configuration file to identify the filter,
a costructor function (&lt;code&gt;New&lt;/code&gt;), a config object (used to parse the filter configuration in the
TOML file) and a help text.&lt;/p&gt;
&lt;p&gt;In this case the filter can be used with this configuration in the
&lt;a href=&#34;https://getbaker.io/docs/how-to/pipeline_configuration/&#34;&gt;TOML file&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;[[filter]]
name = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;MyFilter&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;filter-constructor&#34;&gt;Filter constructor&lt;/h3&gt;
&lt;p&gt;Each filter must have a constructor function that receives a
&lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#FilterParams&#34;&gt;FilterParams&lt;/a&gt; and returns the
&lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#Filter&#34;&gt;Filter interface&lt;/a&gt; implemented by the filter:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;MyFilter&lt;/span&gt;(cfg baker.FilterParams) (baker.Filter, &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt;) {
	&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;MyFilter{}, &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;a href=&#34;https://github.com/AdRoll/baker/blob/main/examples/filtering/filter.go&#34;&gt;filtering example&lt;/a&gt;
shows a more complex constructor that also uses the &lt;code&gt;FilterParams&lt;/code&gt; argument.&lt;/p&gt;
&lt;h3 id=&#34;the-filter-configuration-and-help&#34;&gt;The filter configuration and help&lt;/h3&gt;
&lt;p&gt;A filter requiring some configurations also has a config object, including as many keys as it
needs and tagging each one with an &lt;code&gt;help&lt;/code&gt; tag, a string that contains what a user needs to know
which values set for it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; ClauseFilterConfig &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;struct&lt;/span&gt; {
	Clause &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;`help:&amp;#34;Boolean formula describing which events to let through. If empty, let everything through.&amp;#34;`&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;modify-record-fields&#34;&gt;Modify record fields&lt;/h2&gt;
&lt;p&gt;A filter can change the value of the record fields before calling &lt;code&gt;next()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; (f &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;MyFilter) &lt;span style=&#34;color:#50fa7b&#34;&gt;Process&lt;/span&gt;(r Record, next &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt;(Record)) {
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; src FieldIndex = &lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; dst FieldIndex = &lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;
    v &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; r.&lt;span style=&#34;color:#50fa7b&#34;&gt;Get&lt;/span&gt;(src)
    &lt;span style=&#34;color:#6272a4&#34;&gt;//.. modify v as required
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    r.&lt;span style=&#34;color:#50fa7b&#34;&gt;Set&lt;/span&gt;(dst, v)
    &lt;span style=&#34;color:#50fa7b&#34;&gt;next&lt;/span&gt;(r)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;processing-records&#34;&gt;Processing records&lt;/h2&gt;
&lt;p&gt;Filters do their work in the &lt;code&gt;Process(r Record, next func(Record)&lt;/code&gt; method, where &lt;code&gt;r&lt;/code&gt; is the
Record to process and &lt;code&gt;next&lt;/code&gt; is a closure assigned to the next element in thefilter chain.&lt;/p&gt;
&lt;p&gt;Filters call &lt;code&gt;next(r)&lt;/code&gt; once they&amp;rsquo;re done with the record and desire to forward it, or simply
do not call &lt;code&gt;next()&lt;/code&gt; if they want to discard the record.&lt;/p&gt;
&lt;p&gt;When a filter discards a record it should also report it in the stats:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; MyFilter &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;struct&lt;/span&gt;{
    numProcessedLines &lt;span style=&#34;color:#8be9fd&#34;&gt;int64&lt;/span&gt;
    numFilteredLines  &lt;span style=&#34;color:#8be9fd&#34;&gt;int64&lt;/span&gt;
}

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; (f &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;MyFilter) &lt;span style=&#34;color:#50fa7b&#34;&gt;Process&lt;/span&gt;(r Record, next &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt;(Record)) {
    atomic.&lt;span style=&#34;color:#50fa7b&#34;&gt;AddInt64&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;f.numProcessedLines, &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;)

    &lt;span style=&#34;color:#6272a4&#34;&gt;// shouldBeDiscarded is part of the filter logic
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;shouldBeDiscarded&lt;/span&gt;(r) {
        atomic.&lt;span style=&#34;color:#50fa7b&#34;&gt;AddInt64&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;f.numFilteredLines, &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;)
        &lt;span style=&#34;color:#6272a4&#34;&gt;// return here so next() isn&amp;#39;t called
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt;
    }
    &lt;span style=&#34;color:#6272a4&#34;&gt;// forward the record to the next element of the filter chain
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;next&lt;/span&gt;(r)
}

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; (f &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;MyFilter) &lt;span style=&#34;color:#50fa7b&#34;&gt;Stats&lt;/span&gt;() FilterStats { 
    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; baker.FilterStats{
        NumProcessedLines: atomic.&lt;span style=&#34;color:#50fa7b&#34;&gt;LoadInt64&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;f.numProcessedLines),
        NumFilteredLines:  atomic.&lt;span style=&#34;color:#50fa7b&#34;&gt;LoadInt64&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;f.numFilteredLines),
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;create-records&#34;&gt;Create records&lt;/h2&gt;
&lt;p&gt;A filter can decide to call &lt;code&gt;next()&lt;/code&gt; multiple times to send new or duplicated records to the
next element of the filter chain.&lt;/p&gt;
&lt;p&gt;Note that the new or copied records don&amp;rsquo;t start the filter chain from the first filter in the list
but only the remaining filters are applied to the records.&lt;/p&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;

Remember not to pass the same record to multiple &lt;code&gt;next()&lt;/code&gt; functions or later changes to one of
the records could also impact the others.&lt;br&gt;
Always use &lt;code&gt;Copy()&lt;/code&gt; or &lt;code&gt;CreateRecord()&lt;/code&gt; before calling &lt;code&gt;next()&lt;/code&gt; more than once.
&lt;/div&gt;

&lt;h3 id=&#34;copy&#34;&gt;Copy()&lt;/h3&gt;
&lt;p&gt;Filters can duplicate incoming records (with &lt;code&gt;record.Copy()&lt;/code&gt;), and thus have more records
come out than records that came in.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; (f &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;MyFilter) &lt;span style=&#34;color:#50fa7b&#34;&gt;Process&lt;/span&gt;(r Record, next &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt;(Record)) {
    &lt;span style=&#34;color:#6272a4&#34;&gt;// Call next the 1st time
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;next&lt;/span&gt;(r)

    &lt;span style=&#34;color:#6272a4&#34;&gt;// WRONG, it is the same record as above
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;next&lt;/span&gt;(r)

    &lt;span style=&#34;color:#6272a4&#34;&gt;// CORRECT, this is a copy of the record
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;next&lt;/span&gt;(r.&lt;span style=&#34;color:#50fa7b&#34;&gt;Copy&lt;/span&gt;())
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;createrecord&#34;&gt;CreateRecord()&lt;/h3&gt;
&lt;p&gt;A new, empty, record is created calling the &lt;code&gt;CreateRecord&lt;/code&gt; function.
The &lt;code&gt;CreateRecord&lt;/code&gt; function is available as part of the
&lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#FilterParams&#34;&gt;FilterParams&lt;/a&gt; argument of the
&lt;a href=&#34;#filter-constructor&#34;&gt;filter constructor&lt;/a&gt;. If you plan to use it in the &lt;code&gt;Process&lt;/code&gt; function
then store it to the filter object in the constructor as shown in this example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; MyFilter &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;struct&lt;/span&gt;{
    cfg baker.FilterParams
}

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;NewMyFilter&lt;/span&gt;(cfg baker.FilterParams) (baker.Filter, &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt;) {
	&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;MyFilter{
        cfg: cfg, &lt;span style=&#34;color:#6272a4&#34;&gt;// you can also store only CreateRecord
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    }, &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt;
}

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; (f &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;MyFilter) &lt;span style=&#34;color:#50fa7b&#34;&gt;Process&lt;/span&gt;(r Record, next &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt;(Record)) {
    newRecord &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; f.cfg.&lt;span style=&#34;color:#50fa7b&#34;&gt;CreateRecord&lt;/span&gt;()
    &lt;span style=&#34;color:#6272a4&#34;&gt;//... do something with the record
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;next&lt;/span&gt;(newRecord)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;write-tests&#34;&gt;Write tests&lt;/h2&gt;
&lt;p&gt;When writing tests for a new filter, particular attention should be given to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the &lt;code&gt;New()&lt;/code&gt; (constructor-like) function&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;Process()&lt;/code&gt; function&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Testing the &lt;code&gt;New&lt;/code&gt; function means testing that we&amp;rsquo;re able to intercept wrong configurations.&lt;/p&gt;
&lt;p&gt;An example, using the &lt;code&gt;NewMyFilter&lt;/code&gt; function, is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;cfg &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; baker.FilterParams{
    ComponentParams: baker.ComponentParams{
        DecodedConfig: &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;MyFilterConfig{},
    },
}

&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; filter, err &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;NewMyFilter&lt;/span&gt;(cfg); err &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; {
    t.&lt;span style=&#34;color:#50fa7b&#34;&gt;Errorf&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;unexpected error: %v&amp;#34;&lt;/span&gt;, err)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;Obviously, if the filter requires some configuration values (not like this empty demo filter),
the test should also verify all possible values and corner cases.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;With the &lt;code&gt;filter&lt;/code&gt; instance, it&amp;rsquo;s then possible to test the &lt;code&gt;Process()&lt;/code&gt; function, providing a
manually crafted Record and checking whether the function calls the &lt;code&gt;next()&lt;/code&gt; function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;ll &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;baker.LogLine{FieldSeparator: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;}
&lt;span style=&#34;color:#6272a4&#34;&gt;// Set values to the record, triggering all the filter logic
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// ll.Set(&amp;lt;someIndex&amp;gt;, []byte(&amp;#34;somevalue&amp;#34;))
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;kept &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;
filter.&lt;span style=&#34;color:#50fa7b&#34;&gt;Process&lt;/span&gt;(ll, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt;(baker.Record) {
    kept = &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;
})
&lt;span style=&#34;color:#6272a4&#34;&gt;// check `kept` depending on what is expected for the set values
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: Create a custom output component</title>
      <link>https://getbaker.io/docs/how-tos/create_output/</link>
      <pubDate>Tue, 10 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://getbaker.io/docs/how-tos/create_output/</guid>
      <description>
        
        
        &lt;p&gt;Output components in Baker receive records at the end of the filter chain and are in charge of
storing them, eventually sending the result (like a temporary file in the disk) to an Upload
component.&lt;/p&gt;
&lt;p&gt;To create an output and make it available to Baker, one must:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Implement the &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#Output&#34;&gt;Output&lt;/a&gt; interface&lt;/li&gt;
&lt;li&gt;Fill-up an &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#OutputDesc&#34;&gt;&lt;code&gt;OutputDesc&lt;/code&gt;&lt;/a&gt; struct and register
it within Baker via &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#Components&#34;&gt;&lt;code&gt;Components&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;the-output-interface&#34;&gt;The Output interface&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; Output &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;interface&lt;/span&gt; {
	&lt;span style=&#34;color:#50fa7b&#34;&gt;Run&lt;/span&gt;(in &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;chan&lt;/span&gt; OutputRecord, upch &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;chan&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt;
	&lt;span style=&#34;color:#50fa7b&#34;&gt;Stats&lt;/span&gt;() OutputStats
	&lt;span style=&#34;color:#50fa7b&#34;&gt;CanShard&lt;/span&gt;() &lt;span style=&#34;color:#8be9fd&#34;&gt;bool&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#Output&#34;&gt;Output interface&lt;/a&gt; must be implemented when
creating a new output component.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Run&lt;/code&gt; function implements the component logic and gets a channel where it receives
&lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#OutputRecord&#34;&gt;OutputRecord&lt;/a&gt; objects and a channel to
communicate to the Upload components what to upload.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CanShard&lt;/code&gt; is the function telling whether the output is able to manage sharding. Read the page
&lt;a href=&#34;https://getbaker.io/docs/how-to/sharding/&#34;&gt;dedicated to the sharding&lt;/a&gt; to go deeper in the topic.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Stats&lt;/code&gt; is used to report metrics, see the &lt;a href=&#34;https://getbaker.io/docs/how-to/metrics/&#34;&gt;dedicated page&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;outputdesc&#34;&gt;OutputDesc&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; MyOutputDesc = baker.OutputDesc{
	Name:   &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;MyOutput&amp;#34;&lt;/span&gt;,
	New:    NewMyOutput,
    Config: &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;MyOutputConfig{},
    Raw:    &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;,
	Help:   &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;High-level description of MyOutput&amp;#34;&lt;/span&gt;,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This object has a &lt;code&gt;Name&lt;/code&gt;, that is used in the Baker configuration file to identify the output,
a constructor-like function (&lt;code&gt;New&lt;/code&gt;), a config object (used to parse the output configuration in the
TOML file) and a help text that must help the users to use the component and its configuration
parameters. The &lt;code&gt;Raw&lt;/code&gt; field instructs Baker whether it should send raw records in addition
to single fields (see below for details).&lt;/p&gt;
&lt;h3 id=&#34;output-constructor-like-function&#34;&gt;Output constructor-like function&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;New&lt;/code&gt; field in the &lt;code&gt;OutputDesc&lt;/code&gt; object represents the constructor-like function.&lt;/p&gt;
&lt;p&gt;The function receives an &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#OutputParams&#34;&gt;OutputParams&lt;/a&gt;
object and returns an instance of &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#Output&#34;&gt;Output&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Through &lt;code&gt;OutputParams&lt;/code&gt;, an Output receives its index (in case there&amp;rsquo;s multiple output processes)
and a list of field indexes, in addition to the fields inherited from &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#ComponentParams&#34;&gt;ComponentParams&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;OutputParams.Index&lt;/code&gt; indicates a unique index of the output process among the concurrent output
processes generated by Baker. The &lt;code&gt;procs&lt;/code&gt; configuration can be used to tune the total number of
concurrent processes, see &lt;a href=&#34;https://getbaker.io/docs/how-to/pipeline_configuration/&#34;&gt;Pipeline configuration&lt;/a&gt; for details.&lt;br&gt;
Note that the output should extensively document in &lt;code&gt;OutputDesc.Help&lt;/code&gt; if it is able to manage
concurrent processing or if the user should set it with a single process (&lt;code&gt;procs=1&lt;/code&gt;).
Read &lt;a href=&#34;https://getbaker.io/docs/how-to/concurrency/&#34;&gt;Tuning concurrency&lt;/a&gt; for an in-depth guide to the subject.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;OutputParams.Fields&lt;/code&gt; is a list of &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#FieldIndex&#34;&gt;FieldIndex&lt;/a&gt;
that the output will receive, ordered as they are in the TOML. They&amp;rsquo;re also in the same order as
the fields in &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#OutputRecord&#34;&gt;OutputRecord.Fields&lt;/a&gt;, see
below for details.&lt;br&gt;
If, for any reason, the output needs to retrieve the fields name (like the SQLite output does to
get the columns names), then &lt;code&gt;OutputParams.FieldName&lt;/code&gt; can be used.&lt;/p&gt;
&lt;h3 id=&#34;the-output-configuration-and-help&#34;&gt;The output configuration and help&lt;/h3&gt;
&lt;p&gt;The output configuration object (&lt;code&gt;MyOutputConfig&lt;/code&gt; in the previous example) must export all
configuration parameters that the user can set in the TOML topology file.&lt;/p&gt;
&lt;p&gt;Each field in the struct must include a &lt;code&gt;help&lt;/code&gt; string tag (mandatory) and a &lt;code&gt;required&lt;/code&gt; boolean tag
(default to &lt;code&gt;false&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;All these parameters appear in the generated help. &lt;code&gt;help&lt;/code&gt; should describe the parameter role and/or
its possible values, &lt;code&gt;required&lt;/code&gt; informs Baker it should refuse configurations in which that field
is not defined.&lt;/p&gt;
&lt;h2 id=&#34;outputrecord&#34;&gt;OutputRecord&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#OutputRecord&#34;&gt;OutputRecord&lt;/a&gt; channel received by
the output component can be closed by Baker at any time and the output should return from the &lt;code&gt;Run&lt;/code&gt;
function as soon as possible when this happens.&lt;/p&gt;
&lt;p&gt;Until that moment, the output component must continuously read new records, processing them.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;OutputRecord.Fields&lt;/code&gt; slice contains the string values of the fields that the user choose to
send to the output configuring the
&lt;a href=&#34;http://localhost:1313/docs/how-to/pipeline_configuration/#components-configuration&#34;&gt;&lt;code&gt;fields&lt;/code&gt; key&lt;/a&gt;
in the &lt;code&gt;[output]&lt;/code&gt; section of the TOML topology file.&lt;/p&gt;
&lt;p&gt;Fields are ordered in the same way than the slice of &lt;code&gt;FieldIndex&lt;/code&gt; received in &lt;code&gt;OutputParams.Fields&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In case of a raw output, &lt;code&gt;OutputRecord.Record&lt;/code&gt; contains both the serialized record as a byte slice
and the field values.&lt;/p&gt;
&lt;h2 id=&#34;prepare-data-for-uploading&#34;&gt;Prepare data for uploading&lt;/h2&gt;
&lt;p&gt;If the output component produces files on the local filesystem, then it should send their paths to
the upload component (using the shared string channel), regardless of the real presence of a
configured upload (that is unknown to the output). If the upload is absent, then Baker will ignore
those messages.&lt;/p&gt;
&lt;p&gt;The output can send a single message at the end of its job (think to a sqlite database that should
only be uploaded before Baker exits) or can upload files periodically, like the
&lt;a href=&#34;https://github.com/AdRoll/baker/blob/main/output/filewriter.go&#34;&gt;FileWriter&lt;/a&gt; component does
when it rotates (i.e. it stops writing to a file, send its path to the upload, and then creates
a new file).&lt;/p&gt;
&lt;h2 id=&#34;write-tests&#34;&gt;Write tests&lt;/h2&gt;
&lt;p&gt;Tests for output components often require either mocking external resources/dependencies (think
to an output writing to DynamoDB) or creating temporary files. How to test the components is
strictly tied to the component implementation.&lt;/p&gt;
&lt;p&gt;For these reasons there isn&amp;rsquo;t a single golden rule for testing outputs, but some common rules
can be identified:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;test the &lt;code&gt;New()&lt;/code&gt; (constructor-like) function, to check that the function is able to correctly
instantiate the component with valid configurations and intercept wrong ones&lt;/li&gt;
&lt;li&gt;create small and isolated functions where possible and unit-test them&lt;/li&gt;
&lt;li&gt;test the whole component at integration level&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The last point is where we can go a bit deeper. A possible strategy is to create a new output
instance using the &lt;code&gt;New&lt;/code&gt; function, passing it the &lt;strong&gt;in&lt;/strong&gt; (from Baker to the component) and &lt;strong&gt;out&lt;/strong&gt;
(from the component to the upload) channels and use those channels to interact with the output.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;TestMyOutput&lt;/span&gt;(t &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;testing.T) {
    cfg &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;...&lt;/span&gt; &lt;span style=&#34;color:#6272a4&#34;&gt;// define cfg with component configuration
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    output &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;NewMyOutput&lt;/span&gt;(cfg) &lt;span style=&#34;color:#6272a4&#34;&gt;// use the contructor-like New function
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    
    outch &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;chan&lt;/span&gt; baker.OutputRecord)
    upch &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;)

    wg &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;sync.WaitGroup{}
    wg.&lt;span style=&#34;color:#50fa7b&#34;&gt;Add&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#ff79c6&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt;() {
        outch &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;-&lt;/span&gt; baker.OutputRecord{Fields: []&lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;{&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;}, Record: []&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;byte&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;rawrecord&amp;#34;&lt;/span&gt;)}
        &lt;span style=&#34;color:#6272a4&#34;&gt;// add more records to outch
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;close&lt;/span&gt;(outch)
        &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; upchpath &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;range&lt;/span&gt; upch {
            &lt;span style=&#34;color:#6272a4&#34;&gt;// check upchpath and set some vars/objs
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; upchpath &lt;span style=&#34;color:#ff79c6&#34;&gt;...&lt;/span&gt; { &lt;span style=&#34;color:#6272a4&#34;&gt;// check the path or open the file or whatever...
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;                checkVar = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;something&amp;#34;&lt;/span&gt;
            }
        }
        wg.&lt;span style=&#34;color:#50fa7b&#34;&gt;Done&lt;/span&gt;()
    }()
    &lt;span style=&#34;color:#6272a4&#34;&gt;// run the output, consuming the outch and sending results to upch
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    output.&lt;span style=&#34;color:#50fa7b&#34;&gt;Run&lt;/span&gt;(outch, upch)
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;close&lt;/span&gt;(upch)

    wg.&lt;span style=&#34;color:#50fa7b&#34;&gt;Wait&lt;/span&gt;() &lt;span style=&#34;color:#6272a4&#34;&gt;// wait for the job to end
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    
    &lt;span style=&#34;color:#6272a4&#34;&gt;// now we can check the vars/objs created in the goroutine
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; checkVar &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; wantVar {
        t.&lt;span style=&#34;color:#50fa7b&#34;&gt;Fatalf&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;error!&amp;#34;&lt;/span&gt;)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;SQLite&lt;/code&gt; component
&lt;a href=&#34;https://github.com/AdRoll/baker/blob/main/output/sqlite_test.go&#34;&gt;has a good example&lt;/a&gt; of this
strategy.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Create a custom upload component</title>
      <link>https://getbaker.io/docs/how-tos/create_upload/</link>
      <pubDate>Wed, 11 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://getbaker.io/docs/how-tos/create_upload/</guid>
      <description>
        
        
        &lt;p&gt;The last (optional) component of a Baker pipeline is the Upload, whose job is to, precisely,
upload local files produced by the output component.&lt;/p&gt;
&lt;p&gt;To create an upload component and make it available to Baker, one must:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Implement the &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#Upload&#34;&gt;Upload&lt;/a&gt; interface&lt;/li&gt;
&lt;li&gt;Fill an &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#UploadDesc&#34;&gt;&lt;code&gt;UploadDesc&lt;/code&gt;&lt;/a&gt; structure and
register it within Baker via &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#Components&#34;&gt;&lt;code&gt;Components&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;the-upload-interface&#34;&gt;The Upload interface&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; Upload &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;interface&lt;/span&gt; {
	&lt;span style=&#34;color:#50fa7b&#34;&gt;Run&lt;/span&gt;(upch &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt;
	&lt;span style=&#34;color:#50fa7b&#34;&gt;Stop&lt;/span&gt;()
	&lt;span style=&#34;color:#50fa7b&#34;&gt;Stats&lt;/span&gt;() UploadStats
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#Upload&#34;&gt;Upload interface&lt;/a&gt; must be implemented when
creating a new Upload component.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Run&lt;/code&gt; function implements the component logic and receives a channel where the output sends what
it produces (most probably file paths).&lt;/p&gt;
&lt;p&gt;Currently, only the &lt;a href=&#34;https://github.com/AdRoll/baker/blob/main/upload/s3.go&#34;&gt;S3&lt;/a&gt; component exists
and it expects to receive in the channel the path to the files produced by an output.&lt;/p&gt;
&lt;h2 id=&#34;uploaddesc&#34;&gt;UploadDesc&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; MyUploadDesc = baker.UploadDesc{
	Name:   &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;MyUpload&amp;#34;&lt;/span&gt;,
	New:    NewMyUpload,
	Config: &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;MyUploadConfig{},
	Help:   &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;High-level description of MyUpload&amp;#34;&lt;/span&gt;,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This object has a &lt;code&gt;Name&lt;/code&gt;, that is used in the Baker configuration file to identify the upload,
a constructor-like function (&lt;code&gt;New&lt;/code&gt;), a config object (where the parsed upload configuration from the
TOML file is stored) and a help text that must help the users to use the component and its
configuration parameters.&lt;/p&gt;
&lt;h3 id=&#34;upload-constructor-like-function&#34;&gt;Upload constructor-like function&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;New&lt;/code&gt; key in the &lt;code&gt;UploadDesc&lt;/code&gt; object should be set to a function returning an Upload.&lt;/p&gt;
&lt;p&gt;The function receives an &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#UploadParams&#34;&gt;UploadParams&lt;/a&gt;
object and returns an instance of &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#Upload&#34;&gt;Upload&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It should verify the configuration, accessed via &lt;code&gt;UploadParams.DecodedConfig&lt;/code&gt; and initialize
the component accordingly.&lt;/p&gt;
&lt;h3 id=&#34;upload-configuration-and-help&#34;&gt;Upload configuration and help&lt;/h3&gt;
&lt;p&gt;The upload configuration object (&lt;code&gt;MyUploadConfig&lt;/code&gt; in the previous example) must export all
configuration parameters that the user can set in the TOML topology file.&lt;/p&gt;
&lt;p&gt;Each field in the struct must include a &lt;code&gt;help&lt;/code&gt; string tag (mandatory) and a &lt;code&gt;required&lt;/code&gt; boolean tag
(default to &lt;code&gt;false&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;All these parameters appear in the generated help. &lt;code&gt;help&lt;/code&gt; should describe the parameter role and/or
its possible values, &lt;code&gt;required&lt;/code&gt; informs Baker it should refuse configurations in which that field
is not defined.&lt;/p&gt;
&lt;h2 id=&#34;the-files-to-upload&#34;&gt;The files to upload&lt;/h2&gt;
&lt;p&gt;Through the channel, the upload receives from the output paths to local files that it must upload.&lt;/p&gt;
&lt;p&gt;The only Upload component implemented at the moment, S3, removes those files once uploaded, but there isn&amp;rsquo;t a
golden rule for what to do with them. This is up to the upload component and should be chosen
wisely and documented extensively.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Export metrics</title>
      <link>https://getbaker.io/docs/how-tos/metrics/</link>
      <pubDate>Tue, 03 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://getbaker.io/docs/how-tos/metrics/</guid>
      <description>
        
        
        &lt;p&gt;During its execution, a Baker pipeline exports metrics about the Go runtime as
well as general metrics giving an high-level overview of the ongoing job.&lt;/p&gt;
&lt;p&gt;More specific metrics are also exported on a per-component basis. To that effect,
&lt;code&gt;baker.Input&lt;/code&gt;, &lt;code&gt;baker.Filter&lt;/code&gt;, &lt;code&gt;baker.Output&lt;/code&gt; and &lt;code&gt;baker.Upload&lt;/code&gt; all have a &lt;code&gt;Stats&lt;/code&gt;
method. &lt;code&gt;Stats&lt;/code&gt; is called every second and the component is expected to return both
a predefined set of metrics and a &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#MetricsBag&#34;&gt;&lt;code&gt;baker.MetricsBag&lt;/code&gt;&lt;/a&gt;
containing metrics of arbitrary name and types.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s illustrate this with metrics exported by a filter via
&lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#FilterStats&#34;&gt;&lt;code&gt;baker.FilterStats&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; FilterStats &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;struct&lt;/span&gt; {
	NumProcessedLines &lt;span style=&#34;color:#8be9fd&#34;&gt;int64&lt;/span&gt;
	NumFilteredLines  &lt;span style=&#34;color:#8be9fd&#34;&gt;int64&lt;/span&gt;
	Metrics           MetricsBag
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this case &lt;code&gt;NumProcessedLines&lt;/code&gt; must represent the &lt;strong&gt;total&lt;/strong&gt; number of processed
lines since Baker started, and &lt;code&gt;NumFilteredLines&lt;/code&gt; is the number of discarded
(or filtered) records. Due to historical reasons these fields have the word
&lt;em&gt;lines&lt;/em&gt; in them but they do mean the number of records.&lt;/p&gt;
&lt;p&gt;An important point is that &lt;code&gt;Stats&lt;/code&gt; can be called from any goroutine so it must be
safe for concurrent use by multiple goroutines.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; (i &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;myFilter) &lt;span style=&#34;color:#50fa7b&#34;&gt;Stats&lt;/span&gt;() baker.FilterStats {
    bag &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;make&lt;/span&gt;(baker.MetricsBag)
    bag.&lt;span style=&#34;color:#50fa7b&#34;&gt;AddGauge&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;current_speed&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;float64&lt;/span&gt;(atomic.&lt;span style=&#34;color:#50fa7b&#34;&gt;LoadInt64&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;myFilter.speed)))

    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; baker.FilterStats{
        NumProcessedLines: atomic.&lt;span style=&#34;color:#50fa7b&#34;&gt;LoadInt64&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;myFilter.totalLines),
        NumFilteredLines: atomic.&lt;span style=&#34;color:#50fa7b&#34;&gt;LoadInt64&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;myFilter.filteredLines),
        &lt;span style=&#34;color:#6272a4&#34;&gt;// Metrics could be let to its default value, nil, if not needed.
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        Metrics: bag,
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;configuring-metrics-in-toml&#34;&gt;Configuring metrics in TOML&lt;/h4&gt;
&lt;p&gt;Baker configuration TOML files may have a &lt;code&gt;[metrics]&lt;/code&gt; section dedicated to the
configuration of a metrics client.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[metrics.name]&lt;/code&gt; specifies the metrics client to use, from the list of all registered &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#MetricsClient&#34;&gt;&lt;code&gt;baker.MetricsClient&lt;/code&gt;&lt;/a&gt;.
&lt;code&gt;[metrics.config]&lt;/code&gt; specifies some configuration settings which are specific to the client you&amp;rsquo;re using.&lt;/p&gt;
&lt;p&gt;For example, this is what the &lt;code&gt;[metrics]&lt;/code&gt; section would look like with the &lt;em&gt;Datadog&lt;/em&gt; metrics client:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;[metrics]
name=&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;datadog&amp;#34;&lt;/span&gt;

    [metrics.config]
    host=&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;localhost:8125&amp;#34;&lt;/span&gt;                  &lt;span style=&#34;color:#6272a4&#34;&gt;# address of the dogstatsd client to which send metrics to&lt;/span&gt;
    prefix=&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;myapp.baker.&amp;#34;&lt;/span&gt;                  &lt;span style=&#34;color:#6272a4&#34;&gt;# prefix for all exported metric names&lt;/span&gt;
    send_logs=&lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;                         &lt;span style=&#34;color:#6272a4&#34;&gt;# whether we should log messages (as Dogstatd events) or not &lt;/span&gt;
    tags=[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;env:prod&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;region:eu-west-1&amp;#34;&lt;/span&gt;]  &lt;span style=&#34;color:#6272a4&#34;&gt;# extra tags to associate to all exported metrics &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;disaling-metrics-export&#34;&gt;Disaling metrics export&lt;/h4&gt;
&lt;p&gt;To not export any metrics, it&amp;rsquo;s enough to not provide the &lt;code&gt;[metrics]&lt;/code&gt; section in
Baker configuration file.&lt;/p&gt;
&lt;h4 id=&#34;implementing-a-new-metrics-client&#34;&gt;Implementing a new metrics client&lt;/h4&gt;
&lt;p&gt;The &lt;a href=&#34;https://github.com/AdRoll/baker/tree/main/examples/metrics&#34;&gt;metrics
example&lt;/a&gt; shows an
example implementation of
&lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#MetricsClient&#34;&gt;&lt;code&gt;baker.MetricsClient&lt;/code&gt;&lt;/a&gt;
and how to register it within Baker so that it can be selected in the
&lt;code&gt;[metrics.name]&lt;/code&gt; TOML section.&lt;/p&gt;
&lt;p&gt;In order to be selected from TOML, you must first register a
&lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#MetricsDesc&#34;&gt;&lt;code&gt;baker.MetricsDesc&lt;/code&gt;&lt;/a&gt;
instance within &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#Components&#34;&gt;&lt;code&gt;baker.Components&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; fooBarDesc = baker.MetricsDesc{
	Name:   &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;MyMetrics&amp;#34;&lt;/span&gt;,
	Config: &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;myyMetricsConfig{},
	New:    newMyMetrics,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;where &lt;code&gt;newMyMetrics&lt;/code&gt; is a constructor-like function receiving an &lt;code&gt;interface{}&lt;/code&gt;,
which is guaranteed to be of the type of the &lt;code&gt;Config&lt;/code&gt; field value. This function
should either return a ready to use
&lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#MetricsClient&#34;&gt;&lt;code&gt;baker.MetricsClient&lt;/code&gt;&lt;/a&gt;
or an error saying why it can&amp;rsquo;t.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;newMyMetrics&lt;/span&gt;(icfg &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;interface&lt;/span&gt;{}) (baker.MetricsClient, &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;metricsclient-interface&#34;&gt;Metrics.Client interface&lt;/h4&gt;
&lt;p&gt;Once a &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#MetricsClient&#34;&gt;&lt;code&gt;baker.MetricsClient&lt;/code&gt;&lt;/a&gt;
instance has been successfully created, it&amp;rsquo;s made available to and used by
a Baker pipeline to report metrics. During construction, components receive the
&lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#MetricsClient&#34;&gt;&lt;code&gt;MetricsClient&lt;/code&gt;&lt;/a&gt; instance.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#MetricsClient&#34;&gt;&lt;code&gt;baker.MetricsClient&lt;/code&gt;&lt;/a&gt;
supports the most common type of metric types: &lt;em&gt;gauges&lt;/em&gt;, &lt;em&gt;counters&lt;/em&gt; and &lt;em&gt;histograms&lt;/em&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Read statistics</title>
      <link>https://getbaker.io/docs/how-tos/read_stats/</link>
      <pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://getbaker.io/docs/how-tos/read_stats/</guid>
      <description>
        
        
        &lt;p&gt;While running, Baker dumps statistics on stdout every second. This is an example line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Stats: 1s[w:29425 r:29638] total[w:411300 r:454498 u:1831] speed[w:27420 r:30299] errors[p:0 i:0 f:0 o:0 u:0]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The first bracket shows the current read and write speed, i.e. the records that entered the
pipeline (reads) and the records that successfully exited from it (writes).&lt;/p&gt;
&lt;p&gt;The second bracket is the total since the process was launched (the &lt;code&gt;u:&lt;/code&gt; key is the number of
files successfully uploaded).&lt;/p&gt;
&lt;p&gt;The third bracket shows the average read/write speed (records per second).&lt;/p&gt;
&lt;p&gt;The fourth bracket shows the number of records that were discarded at some point because of errors:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;p:&lt;/code&gt; records discarded for a parsing error&lt;/li&gt;
&lt;li&gt;&lt;code&gt;i:&lt;/code&gt; input records discarded. Most of the time, this refers to validation issues.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;f:&lt;/code&gt; records discarded by filters.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;o:&lt;/code&gt; is the number of records that were discarded because of an error in the output component *&lt;/li&gt;
&lt;li&gt;&lt;code&gt;u:&lt;/code&gt; is the number files whose upload has failed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;* Notice that output components should be resilient to transient network failures,
and they abort the process in case of permanent configuration errors, so the number
here reflects records that could not be permanently written because eg. validation
issues. Eg. think of an output that expects a column to be in a specific format, and
rejects records where that field is not in the expected format. A real-world example
is empty columns that are not accepted by DynamoDB.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Enable sharding in a topology</title>
      <link>https://getbaker.io/docs/how-tos/sharding/</link>
      <pubDate>Thu, 29 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://getbaker.io/docs/how-tos/sharding/</guid>
      <description>
        
        
        &lt;h2 id=&#34;how-to-enable-sharding-in-a-topology&#34;&gt;How to enable sharding in a topology?&lt;/h2&gt;
&lt;p&gt;Sharding is enabled in the &lt;code&gt;[output]&lt;/code&gt; section of the topology TOML
configuration file, by indicating the name of the field used to partition
the records space.&lt;/p&gt;
&lt;p&gt;In the following topology extract, we&amp;rsquo;re using a sharded &lt;code&gt;Filewriter&lt;/code&gt; output
and set the number of instances to 4 (i.e 4 shards). In our case, Baker is
going to extract and hash the &lt;code&gt;name&lt;/code&gt; field of each &lt;code&gt;Record&lt;/code&gt; to determine which
of the 4 &lt;code&gt;Filewriter&lt;/code&gt; instances a &lt;code&gt;Record&lt;/code&gt; is sent to:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;[input]
...

[[filter]]
...

[output]
name=&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Filewriter&amp;#34;&lt;/span&gt;
sharding=&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;
procs=&lt;span style=&#34;color:#bd93f9&#34;&gt;4&lt;/span&gt;

    [output.config]
    ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;limitations&#34;&gt;Limitations&lt;/h2&gt;
&lt;p&gt;Baker only supports sharding at the output level. Baker implements other
strategies so that other types of components (input, filters and uploads)
maximize the pipeline performance.&lt;/p&gt;
&lt;p&gt;Also, keep in mind that not all tasks can be parallelized, so not all outputs
support sharding. So sharding is an intrinsic property that is only present on
some Output components, but not all of them.&lt;/p&gt;
&lt;p&gt;Only a single field can be used for sharding.&lt;/p&gt;
&lt;h2 id=&#34;hash-functions&#34;&gt;Hash functions&lt;/h2&gt;
&lt;p&gt;The field selected for sharding must be &amp;ldquo;shardable&amp;rdquo;: in other words, a sharding function (or
hash function) must be associated to that field.&lt;/p&gt;
&lt;p&gt;Since the aim of sharding is to uniformly distribute the load of incoming
records between multiple instances of an output component, a good hash function
should be &lt;strong&gt;uniform&lt;/strong&gt;; in other words it should map as evenly as possible from
the range of possible input values to the range of output values.&lt;/p&gt;
&lt;p&gt;The range of output values is known, it is  &lt;code&gt;[0, MaxUint64]&lt;/code&gt; since in Baker
hashes are &lt;code&gt;uint64&lt;/code&gt; values).&lt;/p&gt;
&lt;p&gt;However the range of possible input values depends on the domain. That&amp;rsquo;s where
having knowledge of that particular domain will help in designing a hash
function, that both guarantees the uniformity of output values with respect to
input values, and in terms of performance.&lt;/p&gt;
&lt;p&gt;For example, if you know the sharded field is only made of integers from 0 to
1000, the hash function would be implemented differently than if the values for that
field are arbitraty long strings.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s however possible to use a non-optimal but best effort general hash function.
(we&amp;rsquo;re planning to add this to Baker soon).&lt;/p&gt;
&lt;p&gt;A hash function should of course be deterministic (i.e the same input should
always give the same output).&lt;/p&gt;
&lt;h2 id=&#34;register-sharding-functions&#34;&gt;Register sharding functions&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;baker.Components&lt;/code&gt; structure links elements that may appear in the
configuration, to the code eventually running when these elements are used
inside a topology.&lt;/p&gt;
&lt;p&gt;Sharding functions that may be used in topologies are stored inside of
the &lt;code&gt;ShardingFuncs&lt;/code&gt; field of &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#Components&#34;&gt;&lt;code&gt;baker.Components&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;ShardingFuncs &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;map&lt;/span&gt;[baker.FieldIndex]ShardingFunc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And a &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#ShardingFunc&#34;&gt;&lt;code&gt;ShardingFunc&lt;/code&gt;&lt;/a&gt;
is a hash function that returns an &lt;code&gt;uint64&lt;/code&gt; &lt;code&gt;for baker.Record&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; ShardingFunc &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt;(Record) &lt;span style=&#34;color:#8be9fd&#34;&gt;uint64&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, filling &lt;code&gt;ShardingFuncs&lt;/code&gt; is a matter of associating a shardable field to
the sharding function that implements the hashing of that field.&lt;/p&gt;
&lt;h2 id=&#34;putting-it-all-together&#34;&gt;Putting it all together&lt;/h2&gt;
&lt;p&gt;The following is an example of an hypothetical record schema with 3 fields
named &lt;code&gt;timestamp&lt;/code&gt;, &lt;code&gt;city&lt;/code&gt; and &lt;code&gt;country&lt;/code&gt;. Let&amp;rsquo;s say that we&amp;rsquo;d like to use
&lt;code&gt;timestamp&lt;/code&gt; and &lt;code&gt;country&lt;/code&gt; for sharding but not &lt;code&gt;city&lt;/code&gt;. We&amp;rsquo;re going to enable
sharding on these two fields, but note that only one of them can be chosen
for a given topology.&lt;/p&gt;
&lt;p&gt;This is how implementing sharding for such a schema would look probably like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;const&lt;/span&gt; (
    FieldTimestamp baker.FieldIndex = &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#6272a4&#34;&gt;// timestamp is unix epoch timestamp
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    FieldCity baker.FieldIndex      = &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#6272a4&#34;&gt;// city name
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    FieldCountry baker.FieldIndex   = &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#6272a4&#34;&gt;// 2 chars country code
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is an hypothetical function to hash records based on the &lt;code&gt;timestamp&lt;/code&gt; field
which only contains integers:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;hashTimestamp&lt;/span&gt;(r baker.Record) &lt;span style=&#34;color:#8be9fd&#34;&gt;uint64&lt;/span&gt; {
    &lt;span style=&#34;color:#6272a4&#34;&gt;// We know the timestamp is an integer, so we use that 
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// to efficiently compute a hash from it.
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    buf &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; r.&lt;span style=&#34;color:#50fa7b&#34;&gt;Get&lt;/span&gt;(FieldTimestamp)
    ts, _ &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; strconv.&lt;span style=&#34;color:#50fa7b&#34;&gt;Atoi&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;string&lt;/span&gt;(buf))

    &lt;span style=&#34;color:#6272a4&#34;&gt;// Call super efficient integer hash function
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;hashInt&lt;/span&gt;(ts)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And this is how hashing records based on a 2-char &lt;code&gt;country&lt;/code&gt; code field would
look like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;hashCountry&lt;/span&gt;(r baker.Record) &lt;span style=&#34;color:#8be9fd&#34;&gt;uint64&lt;/span&gt; {
    &lt;span style=&#34;color:#6272a4&#34;&gt;// We know the country is made of 2 characters, so we use that 
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// fact to efficiently compute a hash from it.
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    buf &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; r.&lt;span style=&#34;color:#50fa7b&#34;&gt;Get&lt;/span&gt;(FieldCountry)
    country &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; buf[:&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;]

    &lt;span style=&#34;color:#6272a4&#34;&gt;// Call our super fast function that hashes 2 bytes.
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;hash2bytes&lt;/span&gt;(country)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can find &lt;a href=&#34;https://github.com/AdRoll/baker/tree/main/examples/sharding&#34;&gt;here&lt;/a&gt;
a full working example illustrating sharding in Baker.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Tuning concurrency</title>
      <link>https://getbaker.io/docs/how-tos/concurrency/</link>
      <pubDate>Mon, 02 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://getbaker.io/docs/how-tos/concurrency/</guid>
      <description>
        
        
        &lt;p&gt;Baker allows to tune concurrency at various levels of a pipeline:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;input: Baker configuration doesn&amp;rsquo;t expose knobs to tune input concurrency as it highly depends
on the input source and how the input is implemented&lt;/li&gt;
&lt;li&gt;filters: Baker runs N concurrent filter chains&lt;/li&gt;
&lt;li&gt;output: Baker runs M concurrent outputs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By default then, Baker processes records concurrently, without any guaranteed order.&lt;br&gt;
However, if you need to maintain the order of the records through the whole pipeline, it is still
possible by disabling concurrency (&lt;a href=&#34;#guarantee-records-order&#34;&gt;see below for details&lt;/a&gt;).&lt;/p&gt;
&lt;h3 id=&#34;filter-chain-concurrency&#34;&gt;Filter chain concurrency&lt;/h3&gt;
&lt;p&gt;The filter chain is a synchronous list of filters that are applied in the order in which they are
listed in the topology &lt;a href=&#34;https://getbaker.io/docs/core-concepts/toml/&#34;&gt;TOML configuration file&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;By default, though, Baker executes multiple concurrent filter chains (the default value is 16)&lt;/p&gt;
&lt;p&gt;Filterchain concurrency can be set defining the &lt;code&gt;procs&lt;/code&gt; key in the &lt;code&gt;[filterchain]&lt;/code&gt; section:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;[filterchain]
procs=&lt;span style=&#34;color:#bd93f9&#34;&gt;16&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Setting the value to &lt;strong&gt;procs=1&lt;/strong&gt; disables the filter chain concurrency.&lt;/p&gt;
&lt;h3 id=&#34;concurrent-output&#34;&gt;Concurrent output&lt;/h3&gt;
&lt;p&gt;The output concurrency can be set defining the &lt;code&gt;procs&lt;/code&gt; key in the &lt;code&gt;[output]&lt;/code&gt; section:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;[output]
procs=&lt;span style=&#34;color:#bd93f9&#34;&gt;32&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The default value is &lt;strong&gt;32&lt;/strong&gt;.&lt;br&gt;
To disable concurrency, set &lt;strong&gt;procs=1&lt;/strong&gt;.&lt;/p&gt;
&lt;h4 id=&#34;output-concurrency-support&#34;&gt;Output concurrency support&lt;/h4&gt;
&lt;p&gt;For outputs that don&amp;rsquo;t support concurrency, &lt;code&gt;procs=1&lt;/code&gt; must be used to avoid corrupted output or
lost data.&lt;/p&gt;
&lt;p&gt;Refer to the output documentation to know if it supports concurrent processing.&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

We&amp;rsquo;ll soon add a new function to the output to declare whether it supports concurrency,
and Baker will return an error if &lt;code&gt;procs&amp;gt;1&lt;/code&gt; is used with an output that doesn&amp;rsquo;t support it.
&lt;/div&gt;

&lt;h3 id=&#34;guarantee-records-order&#34;&gt;Guarantee Records order&lt;/h3&gt;
&lt;p&gt;Although it&amp;rsquo;s not the primary goal of Baker, it is still possible to disable concurrency and thus
guarantee records ordering from input to output.&lt;/p&gt;
&lt;p&gt;To do so, add both &lt;code&gt;procs=1&lt;/code&gt; for output and filterchain, disabling concurrent processing for
those components.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
