<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Baker, high performance modular pipelines for the Big Data era â€“ How-Tos</title>
    <link>https://getbaker.io/docs/how-tos/</link>
    <description>Recent content in How-Tos on Baker, high performance modular pipelines for the Big Data era</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 16 Nov 2020 00:00:00 +0000</lastBuildDate>
    
	  <atom:link href="https://getbaker.io/docs/how-tos/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Pipeline configuration</title>
      <link>https://getbaker.io/docs/how-tos/pipeline_configuration/</link>
      <pubDate>Thu, 29 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://getbaker.io/docs/how-tos/pipeline_configuration/</guid>
      <description>
        
        
        &lt;p&gt;A Baker &lt;a href=&#34;https://getbaker.io/docs/core-concepts/#pipeline&#34;&gt;pipeline&lt;/a&gt; is declared in a configuration
file in &lt;a href=&#34;https://toml.io/en/&#34;&gt;TOML format&lt;/a&gt;.
We use this file to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;define the topology (i.e the list of components) of the pipeline we want to run&lt;/li&gt;
&lt;li&gt;configure each component&lt;/li&gt;
&lt;li&gt;setup general elements such as metrics&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;configuration-file&#34;&gt;Configuration file&lt;/h3&gt;
&lt;p&gt;Baker is configured using a &lt;a href=&#34;https://toml.io/en/&#34;&gt;TOML&lt;/a&gt; file, which content is processed by the
&lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/Baker#NewConfigFromToml&#34;&gt;&lt;code&gt;NewConfigFromToml&lt;/code&gt;&lt;/a&gt; function.&lt;/p&gt;
&lt;p&gt;The file has several sections, described below:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Section&lt;/th&gt;
&lt;th&gt;Required&lt;/th&gt;
&lt;th&gt;Content&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[general]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;General configuration&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[metrics]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;Metrics service configuration&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[fields]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;Array of record fields names&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[validation]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;Input record field validation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[[user]]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;Array of user-defined configurations&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[input]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;Input component configuration&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[filterchain]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;Filter chain global configuration&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[[filter]]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;Array of filters configuration&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[output]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;true&lt;/td&gt;
&lt;td&gt;Output component configuration&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[upload]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;td&gt;Upload component configuration&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;general-configuration&#34;&gt;General configuration&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;[general]&lt;/code&gt; section is used to configure the general behaviour of Baker.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Effect&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;dont_validate_fields&lt;/td&gt;
&lt;td&gt;bool&lt;/td&gt;
&lt;td&gt;Reports whether records validation is skipped (by not calling Components.Validate)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;fields-configuration&#34;&gt;Fields configuration&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;name&lt;/code&gt; configuration in the &lt;code&gt;[fields]&lt;/code&gt; section provides a declarative way to define the
structure of the records processed by Baker, without asking the user to define the &lt;code&gt;FieldByName&lt;/code&gt;
and &lt;code&gt;FieldName&lt;/code&gt; functions.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;names&lt;/code&gt; is a list of strings declaring the names of the fields and their position in the record
(that is inherited by the position of the name in the list).&lt;/p&gt;
&lt;p&gt;So, to make an example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;[fields]
names = [&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;bar&amp;#34;&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;defines a structure of the records with two fields: &lt;code&gt;foo&lt;/code&gt; as first element and &lt;code&gt;bar&lt;/code&gt; as second.&lt;/p&gt;
&lt;h4 id=&#34;validation-configuration&#34;&gt;Validation configuration&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;[validation]&lt;/code&gt; section is an optional configuration that contains one or more field names each
of which is associated with a regular expression.
If the validation section is specified Baker automatically generates a validation function,
which checks that each input record satisfies the provided regular expression.
The record is discarded at the first field that doesn&amp;rsquo;t match its associated regular expression.
The user could choose to not provide record validation at all or to implement a more sophisticated
validation function using a Go function specified in the &lt;a href=&#34;https://getbaker.io/docs/how-tos/baker_components/#validate&#34;&gt;Components&lt;/a&gt; struct.
However, the validation could not be present both in the TOML and in the Components.&lt;/p&gt;
&lt;p&gt;To make an example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;[validation]
foo = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;^\w+$&amp;#34;&lt;/span&gt;
bar = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;[0-9]+&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;defines that &lt;code&gt;foo&lt;/code&gt; field must be a not empty word and &lt;code&gt;bar&lt;/code&gt; field must contain a number.
In this case, a valid record could be:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;foo&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;bar&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;hello_world&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;hello23&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The regular expression reference could be found at &lt;a href=&#34;https://golang.org/s/re2syntax&#34;&gt;golang.org/s/re2syntax&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;components-configuration&#34;&gt;Components configuration&lt;/h4&gt;
&lt;p&gt;Components sections are &lt;code&gt;[input]&lt;/code&gt;, &lt;code&gt;[[filter]]&lt;/code&gt;, &lt;code&gt;[output]&lt;/code&gt; and &lt;code&gt;[upload]&lt;/code&gt; and contain a
&lt;code&gt;name = &amp;quot;&amp;lt;component name&amp;gt;&amp;quot;&lt;/code&gt; line and an optional &lt;code&gt;config&lt;/code&gt; subsection (like &lt;code&gt;[input.config]&lt;/code&gt;)
to set specific configuration values to the selected component.&lt;/p&gt;
&lt;p&gt;Components&#39; specific configuration can be marked as required (within the component code). If a
required config is missing, Baker won&amp;rsquo;t start.&lt;/p&gt;
&lt;p&gt;This is a minimalist Baker configuration TOML, reading records from files (&lt;code&gt;List&lt;/code&gt;), applying the
&lt;code&gt;TimestampRange&lt;/code&gt; filter and writing the output to &lt;code&gt;DynamoDB&lt;/code&gt;, with some specific options:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;[input]
name=&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;List&amp;#34;&lt;/span&gt;

    [input.config]
    files=[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;records.csv.gz&amp;#34;&lt;/span&gt;]

[[filter]]
name=&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;TimestampRange&amp;#34;&lt;/span&gt;

    [filter.config]
    StartDatetime = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;2020-10-30 15:00:00&amp;#34;&lt;/span&gt;
    EndDatetime = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;2020-11-01 00:00:00&amp;#34;&lt;/span&gt;
    Field = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;timestamp&amp;#34;&lt;/span&gt;

[output]
name=&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;DynamoDB&amp;#34;&lt;/span&gt;
fields=[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;source&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;timestamp&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;user&amp;#34;&lt;/span&gt;]

    [output.config]
    regions=[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;us-west-2&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;us-east-1&amp;#34;&lt;/span&gt;]
    table=&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;MyTable&amp;#34;&lt;/span&gt;
    columns=[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;s:Source&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;n:Timestamp&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;s:User&amp;#34;&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;[input]&lt;/code&gt; selects the input component, or where to read the records from.&lt;br&gt;
In this case, the List component is selected, which is a component that fetches files from
a list of local or remote paths/URLs. &lt;code&gt;[input.config]&lt;/code&gt; is where component-specific configuration
can be specified, and in this case we simply provide the files option to List.&lt;br&gt;
Notice that List would accept http:// or even s3:// URLs there in addition to local paths,&lt;br&gt;
and some more (run ./Baker-bin -help List in the help example for more details).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[filterchain]&lt;/code&gt; defines the configuration for the whole filter chain. Filter-specific configurations
are provided by &lt;code&gt;[[filter]]&lt;/code&gt; (see below). The only accepted configuration in &lt;code&gt;[filterchain]&lt;/code&gt; is
&lt;code&gt;procs = &amp;lt;int&amp;gt;&lt;/code&gt; that defines the number of concurrent filter chains. The default value is 16.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[[filter]]&lt;/code&gt; In TOML syntax, the double brackets indicates an array of sections.&lt;br&gt;
This is where you declare the list of filters (i.e filter chain) to sequentially apply to your
records. As other components, each filter may be followed by a &lt;code&gt;[filter.config]&lt;/code&gt; section.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[output]&lt;/code&gt; selects the output component; the output is where records that made it to the end of
the filter chain without being discarded end up. In this case, the &lt;code&gt;DynamoDB&lt;/code&gt; output is selected,
and its configuration is specified in &lt;code&gt;[output.config]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the example topology above we don&amp;rsquo;t specify an &lt;code&gt;[upload]&lt;/code&gt; section since the output
doesn&amp;rsquo;t create files on the local filesystem, it makes queries to DynamoDB.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;fields&lt;/code&gt; option in the &lt;code&gt;[output]&lt;/code&gt; section selects which fields of the record are sent
to the output.&lt;br&gt;
In fact, most pipelines don&amp;rsquo;t want to send the full records to the output, but they select
a few important fields out of the many available fields.&lt;br&gt;
Notice that this is just a selection: it is up to the output component to decide how to
physically serialize those fields. For instance, the &lt;code&gt;DynamoDB&lt;/code&gt; component requires the user
to specify an option called columns that specifies the name and the type of the column where
the fields are written.&lt;/p&gt;
&lt;h4 id=&#34;metrics-configuration&#34;&gt;Metrics configuration&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;[metrics]&lt;/code&gt; section allows to configure the monitoring solution to use. Currently, only &lt;code&gt;datadog&lt;/code&gt; is
supported.&lt;/p&gt;
&lt;p&gt;See the &lt;a href=&#34;https://getbaker.io/docs/how-tos/metrics/&#34;&gt;dedicated page&lt;/a&gt; to learn how to configure DataDog metrics with Baker.&lt;/p&gt;
&lt;h4 id=&#34;user-defined-configurations&#34;&gt;User defined configurations&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;baker.NewConfigFromToml&lt;/code&gt; function, used by Baker to parse the TOML configuration file, can be
also used to add custom configurations to the TOML file (useful as Baker can be used as library in
a more complex project).&lt;/p&gt;
&lt;p&gt;This is an example of a TOML file defining also some of those user defined configurations (along
with the input and output configurations):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;[input]
name=&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;random&amp;#34;&lt;/span&gt;

[output]
name=&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;recorder&amp;#34;&lt;/span&gt;

[[user]]
name=&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;MyConfiG&amp;#34;&lt;/span&gt;

	[user.config]
	field1 = &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;
	field2 = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;hello!&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Using &lt;code&gt;NewConfigFromToml&lt;/code&gt; is then possible to retrieve those configurations:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;cfg &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; strings.&lt;span style=&#34;color:#50fa7b&#34;&gt;NewReader&lt;/span&gt;(toml) &lt;span style=&#34;color:#6272a4&#34;&gt;// toml is the content of the toml file
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#6272a4&#34;&gt;// myConfig contains the user-defined configurations we expect from the toml file
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; myConfig &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;struct&lt;/span&gt; {
    Field1 &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt;
    Field2 &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;
}
mycfg &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; myConfig{}

&lt;span style=&#34;color:#6272a4&#34;&gt;// comp is the baker components configuration.
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Here we use Inputs and Outputs in addition to User because
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// they are required configurations
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;comp &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; baker.Components{
    Inputs:  []baker.InputDesc{inputtest.RandomDesc},
    Outputs: []baker.OutputDesc{outputtest.RecorderDesc},
    User:    []baker.UserDesc{{Name: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;myconfig&amp;#34;&lt;/span&gt;, Config: &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;mycfg}},
}

&lt;span style=&#34;color:#6272a4&#34;&gt;// Use baker to parse and ingest the configuration file
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;baker.&lt;span style=&#34;color:#50fa7b&#34;&gt;NewConfigFromToml&lt;/span&gt;(cfg, comp)

&lt;span style=&#34;color:#6272a4&#34;&gt;// Now mycfg has been populated with the user defined configurations:
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// myConfig{Field1: 1, Field2: &amp;#34;hello!&amp;#34;}
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// and can be used anywhere in the program
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;More examples can be found in the
&lt;a href=&#34;https://github.com/AdRoll/baker/blob/main/user_config_test.go&#34;&gt;dedicated test file&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;environment-variables-replacement&#34;&gt;Environment variables replacement&lt;/h3&gt;
&lt;p&gt;Baker supports environment variables replacement in the configuration file.&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;${ENV_VAR_NAME}&lt;/code&gt; or &lt;code&gt;$ENV_VAR_NAME&lt;/code&gt; and the value in the file is replaced at runtime.&lt;br&gt;
Note that if the variable doesn&amp;rsquo;t exist, then an empty string is used for replacement.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Record and LogLine</title>
      <link>https://getbaker.io/docs/how-tos/record_and_logline/</link>
      <pubDate>Thu, 29 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://getbaker.io/docs/how-tos/record_and_logline/</guid>
      <description>
        
        
        &lt;p&gt;Baker processes objects called &lt;a href=&#34;http://localhost:1313/docs/core-concepts/#record-and-logline&#34;&gt;&lt;strong&gt;records&lt;/strong&gt;&lt;/a&gt;.
A &lt;code&gt;Record&lt;/code&gt;, in Baker, is an interface that provides an abstraction over a record of
structured data, where fields are indexed and accessed via integers.&lt;/p&gt;
&lt;p&gt;At the moment, Baker provides a single implementation of the Record interface,
called &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#LogLine&#34;&gt;&lt;code&gt;LogLine&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;LogLine&lt;/code&gt; doesn&amp;rsquo;t fit your needs, you can implement the
&lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#Record&#34;&gt;&lt;code&gt;Record&lt;/code&gt; interface&lt;/a&gt; or
modify &lt;a href=&#34;#custom-logline&#34;&gt;&lt;code&gt;LogLine&lt;/code&gt;&lt;/a&gt;. See the &lt;a href=&#34;https://getbaker.io/docs/how-tos/custom_record/&#34;&gt;custom Record how-to&lt;/a&gt;
for more details about implementing the &lt;code&gt;Record&lt;/code&gt; interface from scratch.&lt;/p&gt;
&lt;h2 id=&#34;logline&#34;&gt;LogLine&lt;/h2&gt;
&lt;p&gt;A &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#LogLine&#34;&gt;&lt;code&gt;LogLine&lt;/code&gt;&lt;/a&gt; is an implementation
of the &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#Record&#34;&gt;&lt;code&gt;Record&lt;/code&gt; interface&lt;/a&gt;
which is highly optimized for fast parsing and serializing of CSV records.&lt;/p&gt;
&lt;p&gt;It supports any single-byte field separator and doesn&amp;rsquo;t handle quotes (neither single nor double).&lt;/p&gt;
&lt;p&gt;The maximum number of fields is hard-coded by the &lt;code&gt;LogLineNumFields&lt;/code&gt; constant which is 3000.&lt;/p&gt;
&lt;p&gt;100 extra fields can be stored at runtime in a &lt;code&gt;LogLine&lt;/code&gt; (also hardcoded with &lt;code&gt;NumFieldsBaker&lt;/code&gt;),
these extra fields are a fast way to exchange data between filters and/or outputs but they are
neither handled during Parsing (i.e &lt;code&gt;LogLine.Parse&lt;/code&gt;) nor serialization (&lt;code&gt;LogLine.ToText&lt;/code&gt;).&lt;/p&gt;
&lt;h3 id=&#34;custom-logline&#34;&gt;Custom LogLine&lt;/h3&gt;
&lt;p&gt;If the hardcoded values for
&lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#pkg-constants&#34;&gt;&lt;code&gt;LogLineNumFields&lt;/code&gt; and &lt;code&gt;NumFieldsBaker&lt;/code&gt;&lt;/a&gt;
do not suit your needs, you can copy &lt;a href=&#34;https://github.com/AdRoll/baker/blob/main/logline.go&#34;&gt;&lt;code&gt;logline.go&lt;/code&gt;&lt;/a&gt;
in your project and modify the constants declared at the top of the file.&lt;/p&gt;
&lt;p&gt;Your specialized &lt;code&gt;LogLine&lt;/code&gt; will still implement &lt;code&gt;baker.Record&lt;/code&gt; and thus can be used in lieu
of &lt;code&gt;baker.LogLine&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;CreateRecord&lt;/code&gt; function set into
&lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#Components&#34;&gt;&lt;code&gt;baker.Components&lt;/code&gt;&lt;/a&gt; must return an
instance of your custom &lt;code&gt;LogLine&lt;/code&gt; instead of the default one.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Create a custom Record</title>
      <link>https://getbaker.io/docs/how-tos/custom_record/</link>
      <pubDate>Thu, 29 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://getbaker.io/docs/how-tos/custom_record/</guid>
      <description>
        
        
        &lt;p&gt;As you can read in the &lt;a href=&#34;https://getbaker.io/docs/core-concepts/record_implementation/&#34;&gt;Record and LogLine page&lt;/a&gt;,
Baker processes objects called &lt;strong&gt;records&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;A &lt;code&gt;Record&lt;/code&gt;, in Baker, is an interface that provides an abstraction over a record of flattened data,
where columns of fields are indexed through integers.&lt;/p&gt;
&lt;p&gt;If the Record implementations provided by Baker doesn&amp;rsquo;t fit your needs, you can create your own
version, implementing the &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#Record&#34;&gt;&lt;code&gt;Record&lt;/code&gt; inteface&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;how-to-use-a-custom-version-of-the-record&#34;&gt;How to use a custom version of the Record&lt;/h2&gt;
&lt;p&gt;Once your Record version is ready, you need to use it in your code.&lt;/p&gt;
&lt;p&gt;In order to do so, you must create and fill a &lt;a href=&#34;https://getbaker.io/docs/how-tos/baker_components/&#34;&gt;&lt;code&gt;baker.Components&lt;/code&gt;&lt;/a&gt; struct.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; Components &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;struct&lt;/span&gt; {
	Validate     ValidationFunc
	CreateRecord &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt;() Record
	FieldByName  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;) (FieldIndex, &lt;span style=&#34;color:#8be9fd&#34;&gt;bool&lt;/span&gt;)
	FieldNames   []&lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;

	&lt;span style=&#34;color:#6272a4&#34;&gt;// ... other fields
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;validate&#34;&gt;Validate&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Validate&lt;/code&gt; is the function used to validate a record. It is called for each processed record
unless not set or when the &lt;code&gt;[general] dont_validate_fields = true&lt;/code&gt; configuration is set in
the TOML file.&lt;/p&gt;
&lt;p&gt;Regardless of the TOML configuration, the function is passed to all components that can use
it at their will.&lt;/p&gt;
&lt;h3 id=&#34;createrecord&#34;&gt;&lt;code&gt;CreateRecord&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;CreateRecord&lt;/code&gt; is the function that creates a new record. If not set, a default function is
used that creates a &lt;code&gt;LogLine&lt;/code&gt; with &lt;code&gt;,&lt;/code&gt; as field separator.&lt;/p&gt;
&lt;p&gt;The function is used internally by Baker to create new records every time a new one comes from
the input.&lt;/p&gt;
&lt;p&gt;The function is also passed to components that can use it to create new records while processing.&lt;/p&gt;
&lt;h3 id=&#34;fieldbyname&#34;&gt;&lt;code&gt;FieldByName&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;FieldByName&lt;/code&gt; gets a field index by its name. The function is mainly used by the components
(that receive it during setup) to retrieve the index of a field they need for filtering or
processing, but it is also used internally by Baker when sending fields to the output
(when at least one field is selected in the output TOML configuration).&lt;/p&gt;
&lt;h3 id=&#34;fieldnames&#34;&gt;&lt;code&gt;FieldNames&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;FieldNames []string&lt;/code&gt; lists the names of the fields a &lt;code&gt;Record&lt;/code&gt; can have. Since it&amp;rsquo;s a slice, its
length also indicates the maximum number of fields.&lt;/p&gt;
&lt;h2 id=&#34;record-conformance-test&#34;&gt;Record conformance test&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/AdRoll/baker/blob/23938bc743100373379403dd25618c25f0822231/test_helper.go#L11&#34;&gt;&lt;code&gt;test_helper.go&lt;/code&gt;&lt;/a&gt;
provides a test helper, &lt;code&gt;RecordConformanceTest&lt;/code&gt;, one can and should use to verify their
custom &lt;code&gt;Record&lt;/code&gt; satisfies the invariants required for any &lt;code&gt;Record&lt;/code&gt; implementation.&lt;/p&gt;
&lt;p&gt;Just pass to &lt;code&gt;RecordConformanceTest&lt;/code&gt; a factory function creating new instances of your &lt;code&gt;Record&lt;/code&gt;.&lt;/p&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Warning&lt;/h4&gt;
The conformance test provides a way to verify that a record implementation respects the
invariant that Baker requires for a Record implementation and thus it should always
be executed against all custom implementations of the Record.
&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>Docs: baker.Components</title>
      <link>https://getbaker.io/docs/how-tos/baker_components/</link>
      <pubDate>Thu, 29 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://getbaker.io/docs/how-tos/baker_components/</guid>
      <description>
        
        
        &lt;p&gt;The &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#Components&#34;&gt;&lt;code&gt;baker.Components&lt;/code&gt;&lt;/a&gt; struct
lists all the &lt;a href=&#34;https://getbaker.io/docs/core-concepts/#record-and-logline&#34;&gt;components&lt;/a&gt; available to Baker when defining topologies.&lt;/p&gt;
&lt;p&gt;Hence, to create a topology, Baker requires:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;an instance of &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#Components&#34;&gt;&lt;code&gt;baker.Components&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;a TOML configuration file describing the topology we want to run&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;main&lt;/span&gt;() {
	comp &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; baker.Component {
		&lt;span style=&#34;color:#6272a4&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;	}

	f, _ &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; os.&lt;span style=&#34;color:#50fa7b&#34;&gt;Open&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;/path/to/topology.go&amp;#34;&lt;/span&gt;)
	cfg, _ &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; baker.&lt;span style=&#34;color:#50fa7b&#34;&gt;NewConfigFromToml&lt;/span&gt;(f, components)

_ = baker.&lt;span style=&#34;color:#50fa7b&#34;&gt;Main&lt;/span&gt;(cfg)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The next paragraphs give you a high level overview of each field of the
&lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#Components&#34;&gt;&lt;code&gt;baker.Components&lt;/code&gt;&lt;/a&gt; struct.&lt;/p&gt;
&lt;h2 id=&#34;inputs-filters-outputs-and-uploads&#34;&gt;Inputs, Filters, Outputs and Uploads&lt;/h2&gt;
&lt;p&gt;These fields list the components that are available to topologies. All components present
in &lt;code&gt;baker.Components&lt;/code&gt; can be used in the &lt;a href=&#34;https://getbaker.io/docs/core-concepts/toml/&#34;&gt;TOML configuration file&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The following is an example of &lt;code&gt;baker.Components&lt;/code&gt; where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;we use all &lt;strong&gt;inputs&lt;/strong&gt; and &lt;strong&gt;uploads&lt;/strong&gt; provided in Baker repository&lt;/li&gt;
&lt;li&gt;only a single &lt;strong&gt;filter&lt;/strong&gt; is set, a custom one we declared ourselves&lt;/li&gt;
&lt;li&gt;all Baker &lt;strong&gt;outputs&lt;/strong&gt; are added in addition our own custom output&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;github.com/AdRoll/baker&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;github.com/AdRoll/baker/input&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;github.com/AdRoll/baker/output&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;github.com/AdRoll/baker/upload&amp;#34;&lt;/span&gt;
)

comp &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; baker.Components{
    Inputs:        input.All,
    Filters:       []baker.FilterDesc{MyCustomFilterDesc},
	Outputs:       &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;append&lt;/span&gt;(output.All, MyCustomOutputDesc&lt;span style=&#34;color:#ff79c6&#34;&gt;...&lt;/span&gt;),
	Uploads:       upload.All,

	&lt;span style=&#34;color:#6272a4&#34;&gt;// Other fields not shown here.
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;metrics&#34;&gt;Metrics&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Metrics&lt;/code&gt; lists the metrics clients available when creating topologies.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;github.com/AdRoll/baker&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;github.com/AdRoll/baker/metrics&amp;#34;&lt;/span&gt;
)

comp &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; baker.Components{
    Metrics: metrics.All,

	&lt;span style=&#34;color:#6272a4&#34;&gt;// Other fields not shown here.
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This list can contain a metric backend already included into Baker or a custom implementation
of the &lt;code&gt;baker.MetricsClient&lt;/code&gt; interface.&lt;/p&gt;
&lt;p&gt;For more, see the page &lt;a href=&#34;https://getbaker.io/docs/core-concepts/metrics&#34;&gt;dedicated to metrics&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;user&#34;&gt;User&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;github.com/AdRoll/baker&amp;#34;&lt;/span&gt;

comp &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; baker.Components{
	User:    []baker.UserDesc{ &lt;span style=&#34;color:#6272a4&#34;&gt;/* list of user-specific structs */&lt;/span&gt;},

	&lt;span style=&#34;color:#6272a4&#34;&gt;// Other fields not shown here.
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Baker users might want to use Baker TOML files to store application-specific configuration.
The &lt;code&gt;User&lt;/code&gt; field lists user-defined configurations structures which aren&amp;rsquo;t strictly
useful to Baker.&lt;/p&gt;
&lt;p&gt;To learn more about this topic, read the
&lt;a href=&#34;https://getbaker.io/docs/core-concepts/toml/#user-defined-configurations&#34;&gt;dedicated section&lt;/a&gt; in the Pipeline
configuration page.&lt;/p&gt;
&lt;h2 id=&#34;shardingfuncs&#34;&gt;ShardingFuncs&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;github.com/AdRoll/baker&amp;#34;&lt;/span&gt;

shardingFuncs &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;map&lt;/span&gt;[baker.FieldIndex]baker.ShardingFunc)

comp &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; baker.Components{
	ShardingFuncs: shardingFuncs,

	&lt;span style=&#34;color:#6272a4&#34;&gt;// Other fields not shown here.
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;ShardingFuncs&lt;/code&gt; holds a dictionary associating field indexes to hash functions. When sharding
is enabled, these hash functions are used to determine which shard a record is sent to.&lt;/p&gt;
&lt;h2 id=&#34;validate&#34;&gt;Validate&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;github.com/AdRoll/baker&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;validate&lt;/span&gt;(baker.Record) (&lt;span style=&#34;color:#8be9fd&#34;&gt;bool&lt;/span&gt;, baker.FieldIndex) {
	&lt;span style=&#34;color:#6272a4&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;}

comp &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; baker.Components{
	Validate: validate,

	&lt;span style=&#34;color:#6272a4&#34;&gt;// Other fields not shown here.
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Validate&lt;/code&gt; is the function used to validate a record. It is called for each processed record
unless &lt;code&gt;nil&lt;/code&gt; or when &lt;code&gt;dont_validate_fields&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt; in TOML&amp;rsquo;s &lt;code&gt;[general]&lt;/code&gt; section.&lt;/p&gt;
&lt;p&gt;Regardless of the &lt;code&gt;dont_validate_fields&lt;/code&gt; value, the &lt;code&gt;Validate&lt;/code&gt; function is made accessible
to all components so that they can use it at their will.&lt;/p&gt;
&lt;p&gt;A simple validation function based on regular expression could be enabled from the
&lt;a href=&#34;https://getbaker.io/docs/how-tos/pipeline_configuration/#validation-configuration&#34;&gt;&lt;code&gt;[validation]&lt;/code&gt;&lt;/a&gt; section of the TOML.
Anyways, the user should specify the validation either in the Components or in the TOML.&lt;/p&gt;
&lt;h2 id=&#34;createrecord&#34;&gt;CreateRecord&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;github.com/AdRoll/baker&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;create&lt;/span&gt;() baker.Record {
	&lt;span style=&#34;color:#6272a4&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;}

comp &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; baker.Components{
	CreateRecord: create,

	&lt;span style=&#34;color:#6272a4&#34;&gt;// Other fields not shown here.
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;CreateRecord&lt;/code&gt; is a factory function returning new &lt;code&gt;Record&lt;/code&gt; instances. If not set, a default function is
used that creates a &lt;code&gt;LogLine&lt;/code&gt; with the &lt;strong&gt;comma&lt;/strong&gt; field separator.&lt;/p&gt;
&lt;p&gt;The function is used internally by Baker each time a new Record must be created. This
happens when blobs of raw serialized data, provided by the &lt;code&gt;Input&lt;/code&gt; component, are parsed.&lt;/p&gt;
&lt;p&gt;The function is also available for components needing to create new records.&lt;/p&gt;
&lt;h2 id=&#34;fieldbyname&#34;&gt;FieldByName&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;github.com/AdRoll/baker&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;fieldByName&lt;/span&gt;(name &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;) (baker.FieldIndex, &lt;span style=&#34;color:#8be9fd&#34;&gt;bool&lt;/span&gt;) {
	&lt;span style=&#34;color:#6272a4&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;}

comp &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; baker.Components{
	FieldByName: fieldByName,

	&lt;span style=&#34;color:#6272a4&#34;&gt;// Other fields not shown here.
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;FieldByName&lt;/code&gt; returns the index of a field given its name.&lt;/p&gt;
&lt;p&gt;Internally Baker refers to fields by their indices, but it&amp;rsquo;s simpler for users to refer to fields
with their names. This function exists to convert a field name to its index, it also controls
if the name is valid.&lt;/p&gt;
&lt;p&gt;The function is mainly used by the components (that receive it during setup) to retrieve the
index of a field they need for filtering or processing, but it is also used internally by
Baker when sending fields to the output (when at least one field is selected in the output
TOML configuration).&lt;/p&gt;
&lt;h2 id=&#34;fieldnames&#34;&gt;FieldNames&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;github.com/AdRoll/baker&amp;#34;&lt;/span&gt;

fieldNames &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; []&lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;{&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;field0&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;field1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;field2&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;field3&amp;#34;&lt;/span&gt;}

comp &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; baker.Components{
	FieldNames: fieldNames,

	&lt;span style=&#34;color:#6272a4&#34;&gt;// Other fields not shown here.
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;FieldNames&lt;/code&gt; is the slice holding the record field names.&lt;/p&gt;
&lt;p&gt;Record fields are 0-based indices, and thus the role of the &lt;code&gt;FieldNames&lt;/code&gt; slice is twofold: first it allows
Baker components to refer to a record field by its name rather than its index. It also set an upper-bound on
the number of declared fields a Record can have, which is useful in some cases. That&amp;rsquo;s why &lt;code&gt;FieldNames&lt;/code&gt; is
provided for components to use in case they need it.&lt;/p&gt;
&lt;p&gt;If the &lt;code&gt;FieldNames&lt;/code&gt; slice has not been set, Baker generates it automatically from the &lt;code&gt;[fields]&lt;/code&gt; section in
Baker TOML configuration file. However Baker will refuse to start if field names are neither set in
&lt;code&gt;baker.Components&lt;/code&gt; nor in the configuration file.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Create a custom input component</title>
      <link>https://getbaker.io/docs/how-tos/create_input/</link>
      <pubDate>Mon, 02 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://getbaker.io/docs/how-tos/create_input/</guid>
      <description>
        
        
        &lt;p&gt;The job of a Baker input is to fetch blob of data containing one or multiple serialized records
and send them to Baker.&lt;/p&gt;
&lt;p&gt;The input isn&amp;rsquo;t in charge of splitting/parsing the input data into Records (that is done by Baker),
but only retrieving them as fast as possible in raw format adding, if any, metadata to them and
then sending those values to Baker through a
&lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#Data&#34;&gt;&lt;code&gt;*Data&lt;/code&gt;&lt;/a&gt; channel. The channel size is
customizable in the topology TOML with &lt;code&gt;[input] chansize=&amp;lt;value&amp;gt;&lt;/code&gt; (default to 1024).&lt;/p&gt;
&lt;p&gt;To create an input and make it available to Baker, one must:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Implement the &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#Input&#34;&gt;Input&lt;/a&gt; interface&lt;/li&gt;
&lt;li&gt;Fill an &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#InputDesc&#34;&gt;&lt;code&gt;InputDesc&lt;/code&gt;&lt;/a&gt; structure and register it
within Baker via &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#Components&#34;&gt;&lt;code&gt;Components&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;daemon-vs-batch&#34;&gt;Daemon vs Batch&lt;/h2&gt;
&lt;p&gt;The input component determines the Baker behavior between a batch processor or a long-living daemon.&lt;/p&gt;
&lt;p&gt;If the input exits when its data processing has completed, then Baker waits for the topology to end
and then exits.&lt;/p&gt;
&lt;p&gt;If the input never exits, then Baker acts as a daemon.&lt;/p&gt;
&lt;h2 id=&#34;data&#34;&gt;Data&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#Data&#34;&gt;&lt;code&gt;Data&lt;/code&gt;&lt;/a&gt; object that the input must fill in
with read data has two fields: &lt;code&gt;Bytes&lt;/code&gt;, that must contain the raw read bytes (possibly containing
more records separated by &lt;code&gt;\n&lt;/code&gt;), and &lt;code&gt;Meta&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#Metadata&#34;&gt;&lt;code&gt;Metadata&lt;/code&gt;&lt;/a&gt; can contain additional
information Baker will associate with each of the serialized Record contained in &lt;code&gt;Data&lt;/code&gt;.&lt;br&gt;
Typical information could be the time of retrieval, the filename (in case &lt;code&gt;Records&lt;/code&gt; come from a file), etc.&lt;/p&gt;
&lt;h2 id=&#34;the-input-interface&#34;&gt;The Input interface&lt;/h2&gt;
&lt;p&gt;New &lt;code&gt;Input&lt;/code&gt; components need to implement the &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#Input&#34;&gt;Input interface&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; Input &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;interface&lt;/span&gt; {
	&lt;span style=&#34;color:#50fa7b&#34;&gt;Run&lt;/span&gt;(output &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;chan&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;Data) &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt;
	&lt;span style=&#34;color:#50fa7b&#34;&gt;Stop&lt;/span&gt;()
	&lt;span style=&#34;color:#50fa7b&#34;&gt;Stats&lt;/span&gt;() InputStats
	&lt;span style=&#34;color:#50fa7b&#34;&gt;FreeMem&lt;/span&gt;(data &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;Data)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;Run&lt;/code&gt; function implements the component logic and receives a channel where it sends the
&lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#Data&#34;&gt;raw data&lt;/a&gt; it processes.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;FreeMem(data *Data)&lt;/code&gt; is called by Baker when &lt;code&gt;data&lt;/code&gt; is no longer needed. This is an occasion
for the input to recycle memory, for example if the input uses a &lt;code&gt;sync.Pool&lt;/code&gt; to create new
instances of &lt;code&gt;baker.Data&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;inputdesc&#34;&gt;InputDesc&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; MyInputDesc = baker.InputDesc{
	Name:   &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;MyInput&amp;#34;&lt;/span&gt;,
	New:    NewMyInput,
	Config: &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;MyInputConfig{},
	Help:   &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;High-level description of MyInput&amp;#34;&lt;/span&gt;,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This object has a &lt;code&gt;Name&lt;/code&gt;, that is used in the Baker configuration file to identify the input,
a costructor-like function (&lt;code&gt;New&lt;/code&gt;), a config object (where the parsed input configuration from the
TOML file is stored) and a help text that must help the users to use the component and its
configuration parameters.&lt;/p&gt;
&lt;h3 id=&#34;the-new-function&#34;&gt;The &lt;code&gt;New&lt;/code&gt; function&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;New&lt;/code&gt; field in the &lt;code&gt;InputDesc&lt;/code&gt; object should be to assigned to a function that returns a new &lt;code&gt;Input&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The function receives a &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#InputParams&#34;&gt;InputParams&lt;/a&gt;
object and returns an instance of &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#Input&#34;&gt;Input&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The function should verify the configuration params into &lt;code&gt;InputParams.DecodedConfig&lt;/code&gt; and initialize
the component.&lt;/p&gt;
&lt;h3 id=&#34;input-configuration-and-help&#34;&gt;Input configuration and help&lt;/h3&gt;
&lt;p&gt;The input configuration object (&lt;code&gt;MyInputConfig&lt;/code&gt; in the previous example) must export all
configuration parameters that the user can set in the TOML topology file.&lt;/p&gt;
&lt;p&gt;Each field in the struct must include a &lt;code&gt;help&lt;/code&gt; string tag (mandatory) and a &lt;code&gt;required&lt;/code&gt; boolean tag
(default to &lt;code&gt;false&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;All these parameters appear in the generated help. &lt;code&gt;help&lt;/code&gt; should describe the parameter role and/or
its possible values, &lt;code&gt;required&lt;/code&gt; informs Baker it should refuse configurations in which that field
is not defined.&lt;/p&gt;
&lt;h2 id=&#34;write-tests&#34;&gt;Write tests&lt;/h2&gt;
&lt;p&gt;To test an input component we suggest two main paths:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;test the component in isolation, calling the &lt;code&gt;Run&lt;/code&gt; function&lt;/li&gt;
&lt;li&gt;write an higher-level test by running a complete Baker topology&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Regardless of the chosen path, two additional unit tests are always suggested:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;test the &lt;code&gt;New()&lt;/code&gt; (constructor-like) function, to check that the function is able to correctly
instantiate the component with valid configurations and intercept incorrect ones (in case that&amp;rsquo;s possible)&lt;/li&gt;
&lt;li&gt;create small and isolated functions where possible and unit-test them&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;test-calling-run&#34;&gt;Test calling Run()&lt;/h3&gt;
&lt;p&gt;In case we want to test the component calling the &lt;code&gt;Run&lt;/code&gt; function, this is an example of test where,
after some initialization, the &lt;code&gt;input.Run&lt;/code&gt; function is called and the produced &lt;code&gt;Data&lt;/code&gt; is checked
in a goroutine:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;TestMyInput&lt;/span&gt;(t &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;testing.T) {
    ch &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;baker.Data)
    &lt;span style=&#34;color:#ff79c6&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;close&lt;/span&gt;(ch)

    &lt;span style=&#34;color:#6272a4&#34;&gt;// start a goroutine that acts as Baker, consuming the baker.Data produced by the input
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt;() {
        &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; data &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;range&lt;/span&gt; ch {
            &lt;span style=&#34;color:#6272a4&#34;&gt;// test `data`, that comes from the component,
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#6272a4&#34;&gt;// like checking its content, parse the records, metadata, etc
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;something_is_wrong&lt;/span&gt;(data) {
                t.&lt;span style=&#34;color:#50fa7b&#34;&gt;Fatalf&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;error!&amp;#34;&lt;/span&gt;)
            }
        }
    }()

    &lt;span style=&#34;color:#6272a4&#34;&gt;// Configure the input.
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    cfg &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;...&lt;/span&gt;

    input, err &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;NewMyInput&lt;/span&gt;(cfg) &lt;span style=&#34;color:#6272a4&#34;&gt;// use the contructor-like New function
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// check err
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#6272a4&#34;&gt;// run the input
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; input.&lt;span style=&#34;color:#50fa7b&#34;&gt;Run&lt;/span&gt;(ch); err &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; {
        t.&lt;span style=&#34;color:#50fa7b&#34;&gt;Fatal&lt;/span&gt;(err)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;List&lt;/code&gt; input &lt;a href=&#34;https://github.com/AdRoll/baker/blob/main/input/list_test.go#77&#34;&gt;has an example&lt;/a&gt;
of this testing strategy (look for the &lt;code&gt;TestListBasic&lt;/code&gt; test).&lt;/p&gt;
&lt;h3 id=&#34;test-the-component-running-a-topology&#34;&gt;Test the component running a topology&lt;/h3&gt;
&lt;p&gt;If we want to test the component creating and running a topology, we need to create one starting
from the TOML configuration and then calling &lt;code&gt;NewConfigFromToml&lt;/code&gt;, &lt;code&gt;NewTopologyFromConfig&lt;/code&gt; and &lt;code&gt;Run&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Base&lt;/code&gt;, &lt;code&gt;Recorder&lt;/code&gt; and &lt;code&gt;RawRecorder&lt;/code&gt; outputs included in the
&lt;a href=&#34;https://github.com/AdRoll/baker/tree/main/output/outputtest&#34;&gt;&lt;code&gt;outputtest&lt;/code&gt; package&lt;/a&gt; can be
helpful here to obtain the output and check it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;TestMyInput&lt;/span&gt;(t &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;testing.T) {
    toml &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;`
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;    [input]
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;    name = &amp;#34;MyInput&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;    [output]
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;    name=&amp;#34;RawRecorder&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;    procs=1
&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;    `&lt;/span&gt;
    &lt;span style=&#34;color:#6272a4&#34;&gt;// Add the input to be tested and a testing output
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    c &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; baker.Components{
        Inputs:  []baker.InputDesc{MyInputDesc},
        Outputs: []baker.OutputDesc{outputtest.RawRecorderDesc},
    }

    &lt;span style=&#34;color:#6272a4&#34;&gt;// Create and start the topology
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    cfg, err &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; baker.&lt;span style=&#34;color:#50fa7b&#34;&gt;NewConfigFromToml&lt;/span&gt;(strings.&lt;span style=&#34;color:#50fa7b&#34;&gt;NewReader&lt;/span&gt;(toml), c)
    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; {
        t.&lt;span style=&#34;color:#50fa7b&#34;&gt;Error&lt;/span&gt;(err)
    }
    topology, err &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; baker.&lt;span style=&#34;color:#50fa7b&#34;&gt;NewTopologyFromConfig&lt;/span&gt;(cfg)
    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; {
        t.&lt;span style=&#34;color:#50fa7b&#34;&gt;Error&lt;/span&gt;(err)
    }
    topology.&lt;span style=&#34;color:#50fa7b&#34;&gt;Start&lt;/span&gt;()
    
    &lt;span style=&#34;color:#6272a4&#34;&gt;// In this goroutine we should provide some inputs to the component
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// The format and how to send them to the component, depends on
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// the component itself
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt;() {
        &lt;span style=&#34;color:#ff79c6&#34;&gt;defer&lt;/span&gt; topology.&lt;span style=&#34;color:#50fa7b&#34;&gt;Stop&lt;/span&gt;()
        &lt;span style=&#34;color:#50fa7b&#34;&gt;sendDataToMyInput&lt;/span&gt;() &lt;span style=&#34;color:#6272a4&#34;&gt;// fake function, you need to implement your logic here
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    }

    topology.&lt;span style=&#34;color:#50fa7b&#34;&gt;Wait&lt;/span&gt;() &lt;span style=&#34;color:#6272a4&#34;&gt;// wait for Baker to quit after `topology.Stop()`
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; topology.&lt;span style=&#34;color:#50fa7b&#34;&gt;Error&lt;/span&gt;(); err &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; {
        t.&lt;span style=&#34;color:#50fa7b&#34;&gt;Fatalf&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;topology error: %v&amp;#34;&lt;/span&gt;, err)
    }

    &lt;span style=&#34;color:#6272a4&#34;&gt;// retrieve the output and test the records
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    out &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; topology.Output[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;].(&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;outputtest.Recorder)
    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;len&lt;/span&gt;(out.Records) &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; want {
        t.&lt;span style=&#34;color:#50fa7b&#34;&gt;Errorf&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;want %d log lines, got %d&amp;#34;&lt;/span&gt;, want, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;len&lt;/span&gt;(out.Records))
    }

    &lt;span style=&#34;color:#6272a4&#34;&gt;// more testing on out.Records...
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;TCP&lt;/code&gt; input &lt;a href=&#34;https://github.com/AdRoll/baker/blob/main/input/tcp_test.go&#34;&gt;includes an example&lt;/a&gt;
of this testing strategy.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Create a custom filter component</title>
      <link>https://getbaker.io/docs/how-tos/create_filter/</link>
      <pubDate>Mon, 02 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://getbaker.io/docs/how-tos/create_filter/</guid>
      <description>
        
        
        &lt;p&gt;Creating a custom filter is probably the most common action a Baker user will perform.&lt;/p&gt;
&lt;p&gt;In fact, filters are the components that apply the business logic to a Baker pipeline,
&lt;strong&gt;creating or discarding records or modifying fields.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A working example of a custom filter can be found in the
&lt;a href=&#34;https://github.com/AdRoll/baker/tree/main/examples/filtering&#34;&gt;filtering example&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To create a filter and make it available to Baker, one must:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Implement the Filter interface&lt;/li&gt;
&lt;li&gt;Add a &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#FilterDesc&#34;&gt;&lt;code&gt;FilterDesc&lt;/code&gt;&lt;/a&gt; for the filter to
the available filters in &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#Components&#34;&gt;&lt;code&gt;Components&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;the-filter-interface&#34;&gt;The Filter interface&lt;/h2&gt;
&lt;p&gt;New &lt;code&gt;Filter&lt;/code&gt; components need to implement the &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#Filter&#34;&gt;Filter interface&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; Filter &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;interface&lt;/span&gt; {
	&lt;span style=&#34;color:#50fa7b&#34;&gt;Process&lt;/span&gt;(l Record, next &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt;(Record))
	&lt;span style=&#34;color:#50fa7b&#34;&gt;Stats&lt;/span&gt;() FilterStats
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Process&lt;/code&gt; is the function that actually filters the records&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Stats&lt;/code&gt; return statistics (&lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#FilterStats&#34;&gt;FilterStats&lt;/a&gt;) about the filtering process&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A very simple example of filter doing nothing is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; MyFilter &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;struct&lt;/span&gt;{
    numProcessedLines &lt;span style=&#34;color:#8be9fd&#34;&gt;int64&lt;/span&gt;
}

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; (f &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;MyFilter) &lt;span style=&#34;color:#50fa7b&#34;&gt;Process&lt;/span&gt;(r baker.Record, next &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt;(baker.Record)) {
    atomic.&lt;span style=&#34;color:#50fa7b&#34;&gt;AddInt64&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;f.numProcessedLines, &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#50fa7b&#34;&gt;next&lt;/span&gt;(r)
}

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; (f &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;MyFilter) &lt;span style=&#34;color:#50fa7b&#34;&gt;Stats&lt;/span&gt;() baker.FilterStats { 
    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; baker.FilterStats{
		NumProcessedLines: atomic.&lt;span style=&#34;color:#50fa7b&#34;&gt;LoadInt64&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;f.numProcessedLines),
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;filterdesc&#34;&gt;FilterDesc&lt;/h2&gt;
&lt;p&gt;To be included in the Baker filters, a filter must be described by a
&lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#FilterDesc&#34;&gt;&lt;code&gt;FilterDesc&lt;/code&gt; object&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; MyFilterDesc = baker.FilterDesc{
	Name:   &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;MyFilter&amp;#34;&lt;/span&gt;,
	New:    NewMyFilter,
	Config: &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;MyFilterConfig{},
	Help:   &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;This filter does nothing, but in a great way!&amp;#34;&lt;/span&gt;,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This object has a &lt;code&gt;Name&lt;/code&gt;, that is used in the Baker configuration file to identify the filter,
a costructor function (&lt;code&gt;New&lt;/code&gt;), a config object (used to parse the filter configuration in the
TOML file) and a help text.&lt;/p&gt;
&lt;p&gt;In this case the filter can be used with this configuration in the
&lt;a href=&#34;https://getbaker.io/docs/how-tos/pipeline_configuration/&#34;&gt;TOML file&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;[[filter]]
name = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;MyFilter&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;the-new-function&#34;&gt;The &lt;code&gt;New&lt;/code&gt; function&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;New&lt;/code&gt; field in the &lt;code&gt;FilterDesc&lt;/code&gt; object should be to assigned to a function that returns a new &lt;code&gt;Filter&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Each filter must have a constructor function that receives a
&lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#FilterParams&#34;&gt;FilterParams&lt;/a&gt; and returns the
&lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#Filter&#34;&gt;Filter interface&lt;/a&gt; implemented by the filter:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;NewMyFilter&lt;/span&gt;(cfg baker.FilterParams) (baker.Filter, &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt;) {
	&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;MyFilter{}, &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;a href=&#34;https://github.com/AdRoll/baker/blob/main/examples/filtering/filter.go&#34;&gt;filtering example&lt;/a&gt;
shows a more complex constructor that also uses the &lt;code&gt;FilterParams&lt;/code&gt; argument.&lt;/p&gt;
&lt;h3 id=&#34;filter-configuration-and-help&#34;&gt;Filter configuration and help&lt;/h3&gt;
&lt;p&gt;A filter requiring some configurations also has a config object, including as many keys as it
needs and tagging each one with an &lt;code&gt;help&lt;/code&gt; tag, a string that contains what a user needs to know
which values set for it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; ClauseFilterConfig &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;struct&lt;/span&gt; {
	Clause &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;`help:&amp;#34;Boolean formula describing which events to let through. If empty, let everything through.&amp;#34;`&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Other available tags are &lt;code&gt;required:&amp;quot;true|false&amp;quot;&lt;/code&gt; and &lt;code&gt;default:&amp;quot;&amp;lt;value&amp;gt;&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;modify-record-fields&#34;&gt;Modify record fields&lt;/h2&gt;
&lt;p&gt;A filter can change the value of the record fields before calling &lt;code&gt;next()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; (f &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;MyFilter) &lt;span style=&#34;color:#50fa7b&#34;&gt;Process&lt;/span&gt;(r Record, next &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt;(Record)) {
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; src FieldIndex = &lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; dst FieldIndex = &lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;
    v &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; r.&lt;span style=&#34;color:#50fa7b&#34;&gt;Get&lt;/span&gt;(src)
    &lt;span style=&#34;color:#6272a4&#34;&gt;//.. modify v as required
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    r.&lt;span style=&#34;color:#50fa7b&#34;&gt;Set&lt;/span&gt;(dst, v)
    &lt;span style=&#34;color:#50fa7b&#34;&gt;next&lt;/span&gt;(r)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;processing-records&#34;&gt;Processing records&lt;/h2&gt;
&lt;p&gt;Filters do their work in the &lt;code&gt;Process(r Record, next func(Record)&lt;/code&gt; method, where &lt;code&gt;r&lt;/code&gt; is the
Record to process and &lt;code&gt;next&lt;/code&gt; is a closure assigned to the next element in thefilter chain.&lt;/p&gt;
&lt;p&gt;Filters call &lt;code&gt;next(r)&lt;/code&gt; once they&amp;rsquo;re done with the record and desire to forward it, or simply
do not call &lt;code&gt;next()&lt;/code&gt; if they want to discard the record.&lt;/p&gt;
&lt;p&gt;When a filter discards a record it should also report it in the stats:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; MyFilter &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;struct&lt;/span&gt;{
    numProcessedLines &lt;span style=&#34;color:#8be9fd&#34;&gt;int64&lt;/span&gt;
    numFilteredLines  &lt;span style=&#34;color:#8be9fd&#34;&gt;int64&lt;/span&gt;
}

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; (f &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;MyFilter) &lt;span style=&#34;color:#50fa7b&#34;&gt;Process&lt;/span&gt;(r Record, next &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt;(Record)) {
    atomic.&lt;span style=&#34;color:#50fa7b&#34;&gt;AddInt64&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;f.numProcessedLines, &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;)

    &lt;span style=&#34;color:#6272a4&#34;&gt;// shouldBeDiscarded is part of the filter logic
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;shouldBeDiscarded&lt;/span&gt;(r) {
        atomic.&lt;span style=&#34;color:#50fa7b&#34;&gt;AddInt64&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;f.numFilteredLines, &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;)
        &lt;span style=&#34;color:#6272a4&#34;&gt;// return here so next() isn&amp;#39;t called
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt;
    }
    &lt;span style=&#34;color:#6272a4&#34;&gt;// forward the record to the next element of the filter chain
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;next&lt;/span&gt;(r)
}

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; (f &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;MyFilter) &lt;span style=&#34;color:#50fa7b&#34;&gt;Stats&lt;/span&gt;() FilterStats { 
    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; baker.FilterStats{
        NumProcessedLines: atomic.&lt;span style=&#34;color:#50fa7b&#34;&gt;LoadInt64&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;f.numProcessedLines),
        NumFilteredLines:  atomic.&lt;span style=&#34;color:#50fa7b&#34;&gt;LoadInt64&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;f.numFilteredLines),
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;create-records&#34;&gt;Create records&lt;/h2&gt;
&lt;p&gt;A filter can decide to call &lt;code&gt;next()&lt;/code&gt; multiple times to send new or duplicated records to the
next element of the filter chain.&lt;/p&gt;
&lt;p&gt;Note that the new or copied records don&amp;rsquo;t start the filter chain from the first filter in the list
but only the remaining filters are applied to the records.&lt;/p&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;

Remember not to pass the same record to multiple &lt;code&gt;next()&lt;/code&gt; functions or later changes to one of
the records could also impact the others.&lt;br&gt;
Always use &lt;code&gt;Copy()&lt;/code&gt; or &lt;code&gt;CreateRecord()&lt;/code&gt; before calling &lt;code&gt;next()&lt;/code&gt; more than once.
&lt;/div&gt;

&lt;h3 id=&#34;copy&#34;&gt;Copy()&lt;/h3&gt;
&lt;p&gt;Filters can duplicate incoming records (with &lt;code&gt;record.Copy()&lt;/code&gt;), and thus have more records
come out than records that came in.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; (f &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;MyFilter) &lt;span style=&#34;color:#50fa7b&#34;&gt;Process&lt;/span&gt;(r Record, next &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt;(Record)) {
    &lt;span style=&#34;color:#6272a4&#34;&gt;// Call next the 1st time
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;next&lt;/span&gt;(r)

    &lt;span style=&#34;color:#6272a4&#34;&gt;// WRONG, it is the same record as above
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;next&lt;/span&gt;(r)

    &lt;span style=&#34;color:#6272a4&#34;&gt;// CORRECT, this is a copy of the record
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;next&lt;/span&gt;(r.&lt;span style=&#34;color:#50fa7b&#34;&gt;Copy&lt;/span&gt;())
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;createrecord&#34;&gt;CreateRecord()&lt;/h3&gt;
&lt;p&gt;A new, empty, record is created calling the &lt;code&gt;CreateRecord&lt;/code&gt; function.
The &lt;code&gt;CreateRecord&lt;/code&gt; function is available as part of the
&lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#FilterParams&#34;&gt;FilterParams&lt;/a&gt; argument of the
&lt;a href=&#34;#filter-constructor&#34;&gt;filter constructor&lt;/a&gt;. If you plan to use it in the &lt;code&gt;Process&lt;/code&gt; function
then store it to the filter object in the constructor as shown in this example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; MyFilter &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;struct&lt;/span&gt;{
    cfg baker.FilterParams
}

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;NewMyFilter&lt;/span&gt;(cfg baker.FilterParams) (baker.Filter, &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt;) {
	&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;MyFilter{
        cfg: cfg, &lt;span style=&#34;color:#6272a4&#34;&gt;// you can also store only CreateRecord
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    }, &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt;
}

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; (f &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;MyFilter) &lt;span style=&#34;color:#50fa7b&#34;&gt;Process&lt;/span&gt;(r Record, next &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt;(Record)) {
    newRecord &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; f.cfg.&lt;span style=&#34;color:#50fa7b&#34;&gt;CreateRecord&lt;/span&gt;()
    &lt;span style=&#34;color:#6272a4&#34;&gt;//... do something with the record
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;next&lt;/span&gt;(newRecord)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;write-tests&#34;&gt;Write tests&lt;/h2&gt;
&lt;p&gt;When writing tests for a new filter, particular attention should be given to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the &lt;code&gt;New()&lt;/code&gt; (constructor-like) function&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;Process()&lt;/code&gt; function&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Testing the &lt;code&gt;New&lt;/code&gt; function means testing that we&amp;rsquo;re able to intercept wrong configurations.&lt;/p&gt;
&lt;p&gt;An example, using the &lt;code&gt;NewMyFilter&lt;/code&gt; function, is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;cfg &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; baker.FilterParams{
    ComponentParams: baker.ComponentParams{
        DecodedConfig: &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;MyFilterConfig{},
    },
}

&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; filter, err &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;NewMyFilter&lt;/span&gt;(cfg); err &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; {
    t.&lt;span style=&#34;color:#50fa7b&#34;&gt;Errorf&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;unexpected error: %v&amp;#34;&lt;/span&gt;, err)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;Obviously, if the filter requires some configuration values (not like this empty demo filter),
the test should also verify all possible values and corner cases.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;With the &lt;code&gt;filter&lt;/code&gt; instance, it&amp;rsquo;s then possible to test the &lt;code&gt;Process()&lt;/code&gt; function, providing a
manually crafted Record and checking whether the function calls the &lt;code&gt;next()&lt;/code&gt; function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;ll &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;baker.LogLine{FieldSeparator: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;}
&lt;span style=&#34;color:#6272a4&#34;&gt;// Set values to the record, triggering all the filter logic
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// ll.Set(&amp;lt;someIndex&amp;gt;, []byte(&amp;#34;somevalue&amp;#34;))
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;kept &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;
filter.&lt;span style=&#34;color:#50fa7b&#34;&gt;Process&lt;/span&gt;(ll, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt;(baker.Record) {
    kept = &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;
})
&lt;span style=&#34;color:#6272a4&#34;&gt;// check `kept` depending on what is expected for the set values
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: Create a custom output component</title>
      <link>https://getbaker.io/docs/how-tos/create_output/</link>
      <pubDate>Tue, 10 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://getbaker.io/docs/how-tos/create_output/</guid>
      <description>
        
        
        &lt;p&gt;Output components in Baker receive records at the end of the filter chain and are in charge of
storing them, eventually sending the result (like a temporary file in the disk) to an Upload
component.&lt;/p&gt;
&lt;p&gt;To create an output and make it available to Baker, one must:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Implement the &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#Output&#34;&gt;Output&lt;/a&gt; interface&lt;/li&gt;
&lt;li&gt;Fill-up an &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#OutputDesc&#34;&gt;&lt;code&gt;OutputDesc&lt;/code&gt;&lt;/a&gt; struct and register
it within Baker via &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#Components&#34;&gt;&lt;code&gt;Components&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;the-output-interface&#34;&gt;The Output interface&lt;/h2&gt;
&lt;p&gt;New &lt;code&gt;Output&lt;/code&gt; components need to implement the &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#Output&#34;&gt;Output interface&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; Output &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;interface&lt;/span&gt; {
	&lt;span style=&#34;color:#50fa7b&#34;&gt;Run&lt;/span&gt;(in &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;chan&lt;/span&gt; OutputRecord, upch &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;chan&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt;
	&lt;span style=&#34;color:#50fa7b&#34;&gt;Stats&lt;/span&gt;() OutputStats
	&lt;span style=&#34;color:#50fa7b&#34;&gt;CanShard&lt;/span&gt;() &lt;span style=&#34;color:#8be9fd&#34;&gt;bool&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;Run&lt;/code&gt; function implements the component logic and gets a channel where it receives
&lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#OutputRecord&#34;&gt;OutputRecord&lt;/a&gt; objects and a channel to
communicate to the Upload components what to upload.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CanShard&lt;/code&gt; is the function telling whether the output is able to manage sharding. Read the page
&lt;a href=&#34;https://getbaker.io/docs/how-tos/sharding/&#34;&gt;dedicated to the sharding&lt;/a&gt; to go deeper in the topic.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Stats&lt;/code&gt; is used to report metrics, see the &lt;a href=&#34;https://getbaker.io/docs/how-tos/metrics/&#34;&gt;dedicated page&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;outputdesc&#34;&gt;OutputDesc&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; MyOutputDesc = baker.OutputDesc{
	Name:   &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;MyOutput&amp;#34;&lt;/span&gt;,
	New:    NewMyOutput,
    Config: &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;MyOutputConfig{},
    Raw:    &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;,
	Help:   &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;High-level description of MyOutput&amp;#34;&lt;/span&gt;,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This object has a &lt;code&gt;Name&lt;/code&gt;, that is used in the Baker configuration file to identify the output,
a constructor-like function (&lt;code&gt;New&lt;/code&gt;), a config object (used to parse the output configuration in the
TOML file) and a help text that must help the users to use the component and its configuration
parameters. The &lt;code&gt;Raw&lt;/code&gt; field instructs Baker whether it should send raw records in addition
to single fields (see below for details).&lt;/p&gt;
&lt;h3 id=&#34;the-new-function&#34;&gt;The &lt;code&gt;New&lt;/code&gt; function&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;New&lt;/code&gt; field in the &lt;code&gt;OutputDesc&lt;/code&gt; object should be to assigned to a function that returns a new &lt;code&gt;Output&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The function receives an &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#OutputParams&#34;&gt;OutputParams&lt;/a&gt;
object and returns an instance of &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#Output&#34;&gt;Output&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Through &lt;code&gt;OutputParams&lt;/code&gt;, an Output receives its index (in case there&amp;rsquo;s multiple output processes)
and a list of field indexes, in addition to the fields inherited from &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#ComponentParams&#34;&gt;ComponentParams&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;OutputParams.Index&lt;/code&gt; indicates a unique index of the output process among the concurrent output
processes generated by Baker. The &lt;code&gt;procs&lt;/code&gt; configuration can be used to tune the total number of
concurrent processes, see &lt;a href=&#34;https://getbaker.io/docs/how-tos/pipeline_configuration/&#34;&gt;Pipeline configuration&lt;/a&gt; for details.&lt;br&gt;
Note that the output should extensively document in &lt;code&gt;OutputDesc.Help&lt;/code&gt; if it is able to manage
concurrent processing or if the user should set it with a single process (&lt;code&gt;procs=1&lt;/code&gt;).
Read &lt;a href=&#34;https://getbaker.io/docs/how-tos/concurrency/&#34;&gt;Tuning concurrency&lt;/a&gt; for an in-depth guide to the subject.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;OutputParams.Fields&lt;/code&gt; is a list of &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#FieldIndex&#34;&gt;FieldIndex&lt;/a&gt;
that the output will receive, ordered as they are in the TOML. They&amp;rsquo;re also in the same order as
the fields in &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#OutputRecord&#34;&gt;OutputRecord.Fields&lt;/a&gt;, see
below for details.&lt;br&gt;
If, for any reason, the output needs to retrieve the fields name (like the SQLite output does to
get the columns names), then &lt;code&gt;OutputParams.FieldName&lt;/code&gt; can be used.&lt;/p&gt;
&lt;h3 id=&#34;output-configuration-and-help&#34;&gt;Output configuration and help&lt;/h3&gt;
&lt;p&gt;The output configuration object (&lt;code&gt;MyOutputConfig&lt;/code&gt; in the previous example) must export all
configuration parameters that the user can set in the TOML topology file.&lt;/p&gt;
&lt;p&gt;Each field in the struct must include a &lt;code&gt;help&lt;/code&gt; string tag (mandatory) and a &lt;code&gt;required&lt;/code&gt; boolean tag
(default to &lt;code&gt;false&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;All these parameters appear in the generated help. &lt;code&gt;help&lt;/code&gt; should describe the parameter role and/or
its possible values, &lt;code&gt;required&lt;/code&gt; informs Baker it should refuse configurations in which that field
is not defined.&lt;/p&gt;
&lt;h2 id=&#34;outputrecord&#34;&gt;OutputRecord&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#OutputRecord&#34;&gt;OutputRecord&lt;/a&gt; channel received by
the output component can be closed by Baker at any time and the output should return from the &lt;code&gt;Run&lt;/code&gt;
function as soon as possible when this happens.&lt;/p&gt;
&lt;p&gt;Until that moment, the output component must continuously read new records, processing them.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;OutputRecord.Fields&lt;/code&gt; slice contains the string values of the fields that the user choose to
send to the output configuring the
&lt;a href=&#34;https://getbaker.io/docs/how-tos/pipeline_configuration/#components-configuration&#34;&gt;&lt;code&gt;fields&lt;/code&gt; key&lt;/a&gt;
in the &lt;code&gt;[output]&lt;/code&gt; section of the TOML topology file.&lt;/p&gt;
&lt;p&gt;Fields are ordered in the same way than the slice of &lt;code&gt;FieldIndex&lt;/code&gt; received in &lt;code&gt;OutputParams.Fields&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In case of a raw output, &lt;code&gt;OutputRecord.Record&lt;/code&gt; contains both the serialized record as a byte slice
and the field values.&lt;/p&gt;
&lt;h2 id=&#34;prepare-data-for-uploading&#34;&gt;Prepare data for uploading&lt;/h2&gt;
&lt;p&gt;If the output component produces files on the local filesystem, then it should send their paths to
the upload component (using the shared string channel), regardless of the real presence of a
configured upload (that is unknown to the output). If the upload is absent, then Baker will ignore
those messages.&lt;/p&gt;
&lt;p&gt;The output can send a single message at the end of its job (think to a sqlite database that should
only be uploaded before Baker exits) or can upload files periodically, like the
&lt;a href=&#34;https://github.com/AdRoll/baker/blob/main/output/filewriter.go&#34;&gt;FileWriter&lt;/a&gt; component does
when it rotates (i.e. it stops writing to a file, send its path to the upload, and then creates
a new file).&lt;/p&gt;
&lt;h2 id=&#34;write-tests&#34;&gt;Write tests&lt;/h2&gt;
&lt;p&gt;Tests for output components often require either mocking external resources/dependencies (think
to an output writing to DynamoDB) or creating temporary files. How to test the components is
strictly tied to the component implementation.&lt;/p&gt;
&lt;p&gt;For these reasons there isn&amp;rsquo;t a single golden rule for testing outputs, but some common rules
can be identified:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;test the &lt;code&gt;New()&lt;/code&gt; (constructor-like) function, to check that the function is able to correctly
instantiate the component with valid configurations and intercept wrong ones&lt;/li&gt;
&lt;li&gt;create small and isolated functions where possible and unit-test them&lt;/li&gt;
&lt;li&gt;test the whole component at integration level&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The last point is where we can go a bit deeper. A possible strategy is to create a new output
instance using the &lt;code&gt;New&lt;/code&gt; function, passing it the &lt;strong&gt;in&lt;/strong&gt; (from Baker to the component) and &lt;strong&gt;out&lt;/strong&gt;
(from the component to the upload) channels and use those channels to interact with the output.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;TestMyOutput&lt;/span&gt;(t &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;testing.T) {
    cfg &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;...&lt;/span&gt; &lt;span style=&#34;color:#6272a4&#34;&gt;// define cfg with component configuration
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    output &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;NewMyOutput&lt;/span&gt;(cfg) &lt;span style=&#34;color:#6272a4&#34;&gt;// use the contructor-like New function
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    
    outch &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;chan&lt;/span&gt; baker.OutputRecord)
    upch &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;)

    wg &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;sync.WaitGroup{}
    wg.&lt;span style=&#34;color:#50fa7b&#34;&gt;Add&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#ff79c6&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt;() {
        outch &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;-&lt;/span&gt; baker.OutputRecord{Fields: []&lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;{&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;}, Record: []&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;byte&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;rawrecord&amp;#34;&lt;/span&gt;)}
        &lt;span style=&#34;color:#6272a4&#34;&gt;// add more records to outch
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;close&lt;/span&gt;(outch)
        &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; upchpath &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;range&lt;/span&gt; upch {
            &lt;span style=&#34;color:#6272a4&#34;&gt;// check upchpath and set some vars/objs
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; upchpath &lt;span style=&#34;color:#ff79c6&#34;&gt;...&lt;/span&gt; { &lt;span style=&#34;color:#6272a4&#34;&gt;// check the path or open the file or whatever...
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;                checkVar = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;something&amp;#34;&lt;/span&gt;
            }
        }
        wg.&lt;span style=&#34;color:#50fa7b&#34;&gt;Done&lt;/span&gt;()
    }()
    &lt;span style=&#34;color:#6272a4&#34;&gt;// run the output, consuming the outch and sending results to upch
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    output.&lt;span style=&#34;color:#50fa7b&#34;&gt;Run&lt;/span&gt;(outch, upch)
    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;close&lt;/span&gt;(upch)

    wg.&lt;span style=&#34;color:#50fa7b&#34;&gt;Wait&lt;/span&gt;() &lt;span style=&#34;color:#6272a4&#34;&gt;// wait for the job to end
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    
    &lt;span style=&#34;color:#6272a4&#34;&gt;// now we can check the vars/objs created in the goroutine
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; checkVar &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; wantVar {
        t.&lt;span style=&#34;color:#50fa7b&#34;&gt;Fatalf&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;error!&amp;#34;&lt;/span&gt;)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;SQLite&lt;/code&gt; component
&lt;a href=&#34;https://github.com/AdRoll/baker/blob/main/output/sqlite_test.go&#34;&gt;has a good example&lt;/a&gt; of this
strategy.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Create a custom upload component</title>
      <link>https://getbaker.io/docs/how-tos/create_upload/</link>
      <pubDate>Wed, 11 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://getbaker.io/docs/how-tos/create_upload/</guid>
      <description>
        
        
        &lt;p&gt;The last (optional) component of a Baker pipeline is the Upload, whose job is to, precisely,
upload local files produced by the output component.&lt;/p&gt;
&lt;p&gt;To create an upload component and make it available to Baker, one must:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Implement the &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#Upload&#34;&gt;Upload&lt;/a&gt; interface&lt;/li&gt;
&lt;li&gt;Fill an &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#UploadDesc&#34;&gt;&lt;code&gt;UploadDesc&lt;/code&gt;&lt;/a&gt; structure and
register it within Baker via &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#Components&#34;&gt;&lt;code&gt;Components&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At the moment Baker only proposes a single &lt;code&gt;Upload&lt;/code&gt; component, &lt;a href=&#34;https://github.com/AdRoll/baker/blob/main/upload/s3.go&#34;&gt;S3&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;the-upload-interface&#34;&gt;The Upload interface&lt;/h2&gt;
&lt;p&gt;New &lt;code&gt;Upload&lt;/code&gt; components need to implement the &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#Upload&#34;&gt;Upload interface&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; Upload &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;interface&lt;/span&gt; {
	&lt;span style=&#34;color:#50fa7b&#34;&gt;Run&lt;/span&gt;(upch &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt;
	&lt;span style=&#34;color:#50fa7b&#34;&gt;Stop&lt;/span&gt;()
	&lt;span style=&#34;color:#50fa7b&#34;&gt;Stats&lt;/span&gt;() UploadStats
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;Run&lt;/code&gt; function implements the component logic, it is passed a channel from which the upload
receives absolute paths of the files to upload. These files are produced by the Output component.&lt;/p&gt;
&lt;h2 id=&#34;uploaddesc&#34;&gt;UploadDesc&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; MyUploadDesc = baker.UploadDesc{
	Name:   &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;MyUpload&amp;#34;&lt;/span&gt;,
	New:    NewMyUpload,
	Config: &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;MyUploadConfig{},
	Help:   &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;High-level description of MyUpload&amp;#34;&lt;/span&gt;,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This object has a &lt;code&gt;Name&lt;/code&gt;, that is used in the Baker configuration file to identify the upload,
a constructor-like function (&lt;code&gt;New&lt;/code&gt;), a config object (where the parsed upload configuration from the
TOML file is stored) and a help text that must help the users to use the component and its
configuration parameters.&lt;/p&gt;
&lt;h3 id=&#34;the-new-function&#34;&gt;The &lt;code&gt;New&lt;/code&gt; function&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;New&lt;/code&gt; field in the &lt;code&gt;UploadDesc&lt;/code&gt; object should be to assigned to a function that returns a new &lt;code&gt;Upload&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The function receives an &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#UploadParams&#34;&gt;UploadParams&lt;/a&gt;
object and returns an instance of &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#Upload&#34;&gt;Upload&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It should verify the configuration, accessed via &lt;code&gt;UploadParams.DecodedConfig&lt;/code&gt; and initialize
the component accordingly.&lt;/p&gt;
&lt;h3 id=&#34;upload-configuration-and-help&#34;&gt;Upload configuration and help&lt;/h3&gt;
&lt;p&gt;The upload configuration object (&lt;code&gt;MyUploadConfig&lt;/code&gt; in the previous example) must export all
configuration parameters that the user can set in the TOML topology file.&lt;/p&gt;
&lt;p&gt;Each field in the struct must include a &lt;code&gt;help&lt;/code&gt; string tag (mandatory) and a &lt;code&gt;required&lt;/code&gt; boolean tag
(default to &lt;code&gt;false&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;All these parameters appear in the generated help. &lt;code&gt;help&lt;/code&gt; should describe the parameter role and/or
its possible values, &lt;code&gt;required&lt;/code&gt; informs Baker it should refuse configurations in which that field
is not defined.&lt;/p&gt;
&lt;h2 id=&#34;the-files-to-upload&#34;&gt;The files to upload&lt;/h2&gt;
&lt;p&gt;Through the channel, the upload receives from the output paths to local files that it must upload.&lt;/p&gt;
&lt;p&gt;The only Upload component implemented at the moment, S3, removes those files once uploaded, but there isn&amp;rsquo;t a
golden rule for what to do with them. This is up to the upload component and should be chosen
wisely and documented extensively.&lt;/p&gt;
&lt;h2 id=&#34;write-tests&#34;&gt;Write tests&lt;/h2&gt;
&lt;p&gt;Since, by definition, an upload component involves external resources, you either have to mock those
resources or use them directly.&lt;br&gt;
See an example of how to mock an external resource in the
&lt;a href=&#34;https://github.com/AdRoll/baker/blob/main/upload/s3_test.go&#34;&gt;S3 upload&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However writing a test that uses the actual external resource (a.k.a end-to-end testing) is out of
the scope of this how-to.&lt;br&gt;
We thereby provide some general suggestions to test the uploads:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;do not unit-test external libraries when possible, they should be already tested in their packages&lt;/li&gt;
&lt;li&gt;test the &lt;code&gt;New()&lt;/code&gt; (constructor-like) function, to check that it is able to correctly
instantiate the component with valid configurations and intercept wrong ones&lt;/li&gt;
&lt;li&gt;create small and isolated functions where possible and unit-test them&lt;/li&gt;
&lt;li&gt;test the whole component at integration level, either mocking the external resources or using a
replica testing environment&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;code&gt;S3&lt;/code&gt; upload component has good examples for both
&lt;a href=&#34;https://github.com/AdRoll/baker/blob/main/upload/s3_test.go&#34;&gt;unit tests&lt;/a&gt; and
&lt;a href=&#34;https://github.com/AdRoll/baker/blob/main/upload/s3_integration_test.go&#34;&gt;integration tests&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Export metrics</title>
      <link>https://getbaker.io/docs/how-tos/metrics/</link>
      <pubDate>Tue, 03 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://getbaker.io/docs/how-tos/metrics/</guid>
      <description>
        
        
        &lt;p&gt;Baker can publish various kind of &lt;a href=&#34;https://getbaker.io/docs/core-concepts/#metrics&#34;&gt;metrics&lt;/a&gt; that may
be used to monitor a pipeline in execution. The metrics exported range from numbers
giving an high-level overview of the ongoing pipeline (total processed records,
current speed in records per second, etc.) or per-component metrics such as the
number of files read or written, to performance statistics published by the Go
runtime in order to monitor lower level information (objects, memory, garbage
collection, etc.).&lt;/p&gt;
&lt;p&gt;All components need to implement a &lt;code&gt;Stats&lt;/code&gt; method where they can expose metrics.
Baker calls the &lt;code&gt;Stats&lt;/code&gt; method of each component once per second. &lt;code&gt;Stats&lt;/code&gt; returns
a predefined set of metrics (depending on the component type) and a
&lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#MetricsBag&#34;&gt;&lt;code&gt;baker.MetricsBag&lt;/code&gt;&lt;/a&gt;,
in which one can add other metrics (of arbitrary name and type).&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s illustrate this with metrics exported by a filter via
&lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#FilterStats&#34;&gt;&lt;code&gt;baker.FilterStats&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; FilterStats &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;struct&lt;/span&gt; {
	NumProcessedLines &lt;span style=&#34;color:#8be9fd&#34;&gt;int64&lt;/span&gt;
	NumFilteredLines  &lt;span style=&#34;color:#8be9fd&#34;&gt;int64&lt;/span&gt;
	Metrics           MetricsBag
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this case &lt;code&gt;NumProcessedLines&lt;/code&gt; should represent the &lt;strong&gt;total&lt;/strong&gt; number of processed
lines since the filter creation, while &lt;code&gt;NumFilteredLines&lt;/code&gt; is the number of discarded
(i.e filtered) records. Due to historical reasons these fields have the word
&lt;em&gt;lines&lt;/em&gt; in them but they do mean the number of records.&lt;/p&gt;
&lt;h4 id=&#34;a-practical-example&#34;&gt;A practical example&lt;/h4&gt;
&lt;p&gt;Let&amp;rsquo;s say our filter needs to perform HTTP requests in order to decide whether a record
should be discarded, we might want to keep track of the requests&#39; durations in an histogram.
In this case, we would probably record a slice of &lt;code&gt;time.Duration&lt;/code&gt; in our filter and call
&lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#MetricsBag.AddTimings&#34;&gt;&lt;code&gt;AddTimings&lt;/code&gt;&lt;/a&gt; on the
returned &lt;code&gt;MetricsBag&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;An important point is that Baker may call &lt;code&gt;Process&lt;/code&gt; and &lt;code&gt;Stats&lt;/code&gt; concurrently, from different
goroutines so you must use proper locking on data structures which are shared between the
these two methods.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; (f &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;myFilter) &lt;span style=&#34;color:#50fa7b&#34;&gt;Process&lt;/span&gt;(r Record, next &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt;(Record)) {
    atomic.&lt;span style=&#34;color:#50fa7b&#34;&gt;AddInt64&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;myFilter.totalLines, &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;)

    &lt;span style=&#34;color:#6272a4&#34;&gt;/* perform http request and keep track of its duration
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;     * in i.requestDurations
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;     */&lt;/span&gt;

    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#6272a4&#34;&gt;/* filter logic*/&lt;/span&gt;) {
        &lt;span style=&#34;color:#6272a4&#34;&gt;// discard line
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        atomic.&lt;span style=&#34;color:#50fa7b&#34;&gt;AddInt64&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;myFilter.filteredLines, &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;)
        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt;
    }
}

&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; (i &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;myFilter) &lt;span style=&#34;color:#50fa7b&#34;&gt;Stats&lt;/span&gt;() baker.FilterStats {
    i.mu.&lt;span style=&#34;color:#50fa7b&#34;&gt;Lock&lt;/span&gt;()
    bag &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;make&lt;/span&gt;(baker.MetricsBag)    
    bag.&lt;span style=&#34;color:#50fa7b&#34;&gt;AddTimings&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;myfilter_http_request_duration&amp;#34;&lt;/span&gt;, i.requestDurations)
    i.mu.&lt;span style=&#34;color:#50fa7b&#34;&gt;Unlock&lt;/span&gt;()

    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; baker.FilterStats{
        NumProcessedLines: atomic.&lt;span style=&#34;color:#50fa7b&#34;&gt;LoadInt64&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;myFilter.totalLines),
        NumFilteredLines: atomic.&lt;span style=&#34;color:#50fa7b&#34;&gt;LoadInt64&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;myFilter.filteredLines),
        Metrics: bag,
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;configuring-metrics-in-toml&#34;&gt;Configuring metrics in TOML&lt;/h4&gt;
&lt;p&gt;Baker configuration TOML files may have a &lt;code&gt;[metrics]&lt;/code&gt; section dedicated to the
configuration of a metrics client.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[metrics.name]&lt;/code&gt; specifies the metrics client to use, from the list of all registered &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#MetricsClient&#34;&gt;&lt;code&gt;baker.MetricsClient&lt;/code&gt;&lt;/a&gt;.
&lt;code&gt;[metrics.config]&lt;/code&gt; specifies some configuration settings which are specific to the client you&amp;rsquo;re using.&lt;/p&gt;
&lt;p&gt;For example, this is what the &lt;code&gt;[metrics]&lt;/code&gt; section would look like with the &lt;em&gt;Datadog&lt;/em&gt; metrics client:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;[metrics]
name=&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;datadog&amp;#34;&lt;/span&gt;

    [metrics.config]
    host=&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;localhost:8125&amp;#34;&lt;/span&gt;                  &lt;span style=&#34;color:#6272a4&#34;&gt;# address of the dogstatsd client to which send metrics to&lt;/span&gt;
    prefix=&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;myapp.baker.&amp;#34;&lt;/span&gt;                  &lt;span style=&#34;color:#6272a4&#34;&gt;# prefix for all exported metric names&lt;/span&gt;
    send_logs=&lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;                         &lt;span style=&#34;color:#6272a4&#34;&gt;# whether we should log messages (as Dogstatd events) or not &lt;/span&gt;
    tags=[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;env:prod&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;region:eu-west-1&amp;#34;&lt;/span&gt;]  &lt;span style=&#34;color:#6272a4&#34;&gt;# extra tags to associate to all exported metrics &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;disabling-metrics&#34;&gt;Disabling metrics&lt;/h4&gt;
&lt;p&gt;If you don&amp;rsquo;t want to publish any metrics, it&amp;rsquo;s enough to not provide the &lt;code&gt;[metrics]&lt;/code&gt; TOML section in
Baker configuration file.&lt;/p&gt;
&lt;h4 id=&#34;implementing-a-new-metrics-client&#34;&gt;Implementing a new metrics client&lt;/h4&gt;
&lt;p&gt;The &lt;a href=&#34;https://github.com/AdRoll/baker/tree/main/examples/metrics&#34;&gt;metrics example&lt;/a&gt; shows an
example implementation of
&lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#MetricsClient&#34;&gt;&lt;code&gt;baker.MetricsClient&lt;/code&gt;&lt;/a&gt;
and how to register it within Baker so that it can be selected in the
&lt;code&gt;[metrics.name]&lt;/code&gt; TOML section.&lt;/p&gt;
&lt;p&gt;In order to be selected from TOML, you must first register a
&lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#MetricsDesc&#34;&gt;&lt;code&gt;baker.MetricsDesc&lt;/code&gt;&lt;/a&gt;
instance within &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#Components&#34;&gt;&lt;code&gt;baker.Components&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; fooBarDesc = baker.MetricsDesc{
	Name:   &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;MyMetrics&amp;#34;&lt;/span&gt;,
	Config: &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;myyMetricsConfig{},
	New:    newMyMetrics,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;where &lt;code&gt;newMyMetrics&lt;/code&gt; is a constructor-like function receiving an &lt;code&gt;interface{}&lt;/code&gt;,
which is guaranteed to be of the type of the &lt;code&gt;Config&lt;/code&gt; field value. This function
should either return a ready to use
&lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#MetricsClient&#34;&gt;&lt;code&gt;baker.MetricsClient&lt;/code&gt;&lt;/a&gt;
or an error saying why it can&amp;rsquo;t.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;newMyMetrics&lt;/span&gt;(icfg &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;interface&lt;/span&gt;{}) (baker.MetricsClient, &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;metricsclient-interface&#34;&gt;Metrics.Client interface&lt;/h4&gt;
&lt;p&gt;Once a &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#MetricsClient&#34;&gt;&lt;code&gt;baker.MetricsClient&lt;/code&gt;&lt;/a&gt;
instance has been successfully created, it&amp;rsquo;s made available to and used by
a Baker pipeline to report metrics. During construction, components receive the
&lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#MetricsClient&#34;&gt;&lt;code&gt;MetricsClient&lt;/code&gt;&lt;/a&gt; instance.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#MetricsClient&#34;&gt;&lt;code&gt;baker.MetricsClient&lt;/code&gt;&lt;/a&gt;
supports the most common type of metric types: &lt;em&gt;gauges&lt;/em&gt;, &lt;em&gt;counters&lt;/em&gt; and &lt;em&gt;histograms&lt;/em&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Read statistics</title>
      <link>https://getbaker.io/docs/how-tos/read_stats/</link>
      <pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://getbaker.io/docs/how-tos/read_stats/</guid>
      <description>
        
        
        &lt;p&gt;While running, Baker dumps statistics on stdout every second. This is an example line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Stats: 1s[w:29425 r:29638] total[w:411300 r:454498 u:1831] speed[w:27420 r:30299] errors[p:0 i:0 f:0 o:0 u:0]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The first bracket shows the current read and write speed, i.e. the records that entered the
pipeline (reads) and the records that successfully exited from it (writes).&lt;/p&gt;
&lt;p&gt;The second bracket is the total since the process was launched (the &lt;code&gt;u:&lt;/code&gt; key is the number of
files successfully uploaded).&lt;/p&gt;
&lt;p&gt;The third bracket shows the average read/write speed (records per second).&lt;/p&gt;
&lt;p&gt;The fourth bracket shows the number of records that were discarded at some point because of errors:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;p:&lt;/code&gt; records discarded for a parsing error&lt;/li&gt;
&lt;li&gt;&lt;code&gt;i:&lt;/code&gt; input records discarded. Most of the time, this refers to validation issues.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;f:&lt;/code&gt; records discarded by filters.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;o:&lt;/code&gt; is the number of records that were discarded because of an error in the output component *&lt;/li&gt;
&lt;li&gt;&lt;code&gt;u:&lt;/code&gt; is the number files whose upload has failed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;* Notice that output components should be resilient to transient network failures,
and they abort the process in case of permanent configuration errors, so the number
here reflects records that could not be permanently written because eg. validation
issues. Eg. think of an output that expects a column to be in a specific format, and
rejects records where that field is not in the expected format. A real-world example
is empty columns that are not accepted by DynamoDB.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Sharding setup</title>
      <link>https://getbaker.io/docs/how-tos/sharding/</link>
      <pubDate>Thu, 29 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://getbaker.io/docs/how-tos/sharding/</guid>
      <description>
        
        
        &lt;p&gt;When a topology is configured with multiple output processes, &lt;a href=&#34;https://getbaker.io/docs/core-concepts/#sharding&#34;&gt;Sharding&lt;/a&gt;
allows to partition the records sent to each of them based on the value of a given field.&lt;/p&gt;
&lt;p&gt;Sharding is enabled in the &lt;code&gt;[output]&lt;/code&gt; section of the TOML file, by indicating the name
of the field we wish to use to partition the records space.&lt;/p&gt;
&lt;p&gt;In the following topology extract, we&amp;rsquo;re using a sharded &lt;code&gt;Filewriter&lt;/code&gt; output
and set the number of instances to 4 (i.e 4 shards). In our case, Baker is
going to extract and hash the &lt;code&gt;name&lt;/code&gt; field of each &lt;code&gt;Record&lt;/code&gt; to determine which
of the 4 &lt;code&gt;Filewriter&lt;/code&gt; instances a &lt;code&gt;Record&lt;/code&gt; is sent to:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;[input]
...

[[filter]]
...

[output]
name=&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Filewriter&amp;#34;&lt;/span&gt;
sharding=&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;
procs=&lt;span style=&#34;color:#bd93f9&#34;&gt;4&lt;/span&gt;

    [output.config]
    ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;limitations&#34;&gt;Limitations&lt;/h2&gt;
&lt;p&gt;Baker only supports sharding at the output level. Baker implements other
strategies so that other types of components (input, filters and uploads)
maximize the pipeline performance.&lt;/p&gt;
&lt;p&gt;Also, keep in mind that not all tasks can be parallelized, so not all outputs
support sharding. So sharding is an intrinsic property that is only present on
some Output components, but not all of them.&lt;/p&gt;
&lt;p&gt;Only a single field can be used for sharding.&lt;/p&gt;
&lt;h2 id=&#34;hash-functions&#34;&gt;Hash functions&lt;/h2&gt;
&lt;p&gt;The field selected for sharding must be &amp;ldquo;shardable&amp;rdquo;: in other words, a sharding function (or
hash function) must be associated to that field.&lt;/p&gt;
&lt;p&gt;Since the aim of sharding is to uniformly distribute the load of incoming
records between multiple instances of an output component, a good hash function
should be &lt;strong&gt;uniform&lt;/strong&gt;; in other words it should map as evenly as possible from
the range of possible input values to the range of output values.&lt;/p&gt;
&lt;p&gt;The range of output values is known, it is  &lt;code&gt;[0, MaxUint64]&lt;/code&gt; since in Baker
hashes are &lt;code&gt;uint64&lt;/code&gt; values).&lt;/p&gt;
&lt;p&gt;However the range of possible input values depends on the domain. That&amp;rsquo;s where
having knowledge of that particular domain will help in designing a hash
function, that both guarantees the uniformity of output values with respect to
input values, and in terms of performance.&lt;/p&gt;
&lt;p&gt;For example, if you know the sharded field is only made of integers from 0 to
1000, the hash function would be implemented differently than if the values for that
field are arbitrary long strings.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s however possible to use a non-optimal but best effort general hash function.
(we&amp;rsquo;re planning to add this to Baker soon).&lt;/p&gt;
&lt;p&gt;A hash function should of course be deterministic (i.e the same input should
always give the same output).&lt;/p&gt;
&lt;h2 id=&#34;register-sharding-functions&#34;&gt;Register sharding functions&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;baker.Components&lt;/code&gt; structure links elements that may appear in the
configuration, to the code eventually running when these elements are used
inside a topology.&lt;/p&gt;
&lt;p&gt;Sharding functions that may be used in topologies are stored inside of
the &lt;code&gt;ShardingFuncs&lt;/code&gt; field of &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#Components&#34;&gt;&lt;code&gt;baker.Components&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;ShardingFuncs &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;map&lt;/span&gt;[baker.FieldIndex]ShardingFunc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And a &lt;a href=&#34;https://pkg.go.dev/github.com/AdRoll/baker#ShardingFunc&#34;&gt;&lt;code&gt;ShardingFunc&lt;/code&gt;&lt;/a&gt;
is a hash function that returns an &lt;code&gt;uint64&lt;/code&gt; &lt;code&gt;for baker.Record&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; ShardingFunc &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt;(Record) &lt;span style=&#34;color:#8be9fd&#34;&gt;uint64&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, filling &lt;code&gt;ShardingFuncs&lt;/code&gt; is a matter of associating a shardable field to
the sharding function that implements the hashing of that field.&lt;/p&gt;
&lt;h2 id=&#34;putting-it-all-together&#34;&gt;Putting it all together&lt;/h2&gt;
&lt;p&gt;The following is an example of an hypothetical record schema with 3 fields
named &lt;code&gt;timestamp&lt;/code&gt;, &lt;code&gt;city&lt;/code&gt; and &lt;code&gt;country&lt;/code&gt;. Let&amp;rsquo;s say that we&amp;rsquo;d like to use
&lt;code&gt;timestamp&lt;/code&gt; and &lt;code&gt;country&lt;/code&gt; for sharding but not &lt;code&gt;city&lt;/code&gt;. We&amp;rsquo;re going to enable
sharding on these two fields, but note that only one of them can be chosen
for a given topology.&lt;/p&gt;
&lt;p&gt;This is how implementing sharding for such a schema would look probably like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;const&lt;/span&gt; (
    FieldTimestamp baker.FieldIndex = &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#6272a4&#34;&gt;// timestamp is unix epoch timestamp
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    FieldCity baker.FieldIndex      = &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#6272a4&#34;&gt;// city name
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    FieldCountry baker.FieldIndex   = &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#6272a4&#34;&gt;// 2 chars country code
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is an hypothetical function to hash records based on the &lt;code&gt;timestamp&lt;/code&gt; field
which only contains integers:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;hashTimestamp&lt;/span&gt;(r baker.Record) &lt;span style=&#34;color:#8be9fd&#34;&gt;uint64&lt;/span&gt; {
    &lt;span style=&#34;color:#6272a4&#34;&gt;// We know the timestamp is an integer, so we use that 
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// to efficiently compute a hash from it.
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    buf &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; r.&lt;span style=&#34;color:#50fa7b&#34;&gt;Get&lt;/span&gt;(FieldTimestamp)
    ts, _ &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; strconv.&lt;span style=&#34;color:#50fa7b&#34;&gt;Atoi&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;string&lt;/span&gt;(buf))

    &lt;span style=&#34;color:#6272a4&#34;&gt;// Call super efficient integer hash function
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;hashInt&lt;/span&gt;(ts)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And this is how hashing records based on a 2-char &lt;code&gt;country&lt;/code&gt; code field would
look like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;hashCountry&lt;/span&gt;(r baker.Record) &lt;span style=&#34;color:#8be9fd&#34;&gt;uint64&lt;/span&gt; {
    &lt;span style=&#34;color:#6272a4&#34;&gt;// We know the country is made of 2 characters, so we use that 
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// fact to efficiently compute a hash from it.
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    buf &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; r.&lt;span style=&#34;color:#50fa7b&#34;&gt;Get&lt;/span&gt;(FieldCountry)
    country &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; buf[:&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;]

    &lt;span style=&#34;color:#6272a4&#34;&gt;// Call our super fast function that hashes 2 bytes.
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;hash2bytes&lt;/span&gt;(country)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can find &lt;a href=&#34;https://github.com/AdRoll/baker/tree/main/examples/sharding&#34;&gt;here&lt;/a&gt;
a full working example illustrating sharding in Baker.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Tuning concurrency</title>
      <link>https://getbaker.io/docs/how-tos/concurrency/</link>
      <pubDate>Mon, 02 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://getbaker.io/docs/how-tos/concurrency/</guid>
      <description>
        
        
        &lt;p&gt;Baker allows to tune concurrency at various levels of a pipeline:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;input: Baker configuration doesn&amp;rsquo;t expose knobs to tune input concurrency as it highly depends
on the input source and how the input is implemented&lt;/li&gt;
&lt;li&gt;filters: Baker runs N concurrent filter chains&lt;/li&gt;
&lt;li&gt;output: Baker runs M concurrent outputs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By default then, Baker processes records concurrently, without any guaranteed order.&lt;br&gt;
However, if you need to maintain the order of the records through the whole pipeline, it is still
possible by disabling concurrency (&lt;a href=&#34;#guarantee-records-order&#34;&gt;see below for details&lt;/a&gt;).&lt;/p&gt;
&lt;h3 id=&#34;filter-chain-concurrency&#34;&gt;Filter chain concurrency&lt;/h3&gt;
&lt;p&gt;The filter chain is a synchronous list of filters that are applied in the order in which they are
listed in the topology &lt;a href=&#34;https://getbaker.io/docs/core-concepts/toml/&#34;&gt;TOML configuration file&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;By default, though, Baker executes multiple concurrent filter chains (the default value is 16)&lt;/p&gt;
&lt;p&gt;Filterchain concurrency can be set defining the &lt;code&gt;procs&lt;/code&gt; key in the &lt;code&gt;[filterchain]&lt;/code&gt; section:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;[filterchain]
procs=&lt;span style=&#34;color:#bd93f9&#34;&gt;16&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Setting the value to &lt;strong&gt;procs=1&lt;/strong&gt; disables the filter chain concurrency.&lt;/p&gt;
&lt;h3 id=&#34;concurrent-output&#34;&gt;Concurrent output&lt;/h3&gt;
&lt;p&gt;The output concurrency can be set defining the &lt;code&gt;procs&lt;/code&gt; key in the &lt;code&gt;[output]&lt;/code&gt; section:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;[output]
procs=&lt;span style=&#34;color:#bd93f9&#34;&gt;32&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The default value is &lt;strong&gt;32&lt;/strong&gt;.&lt;br&gt;
To disable concurrency, set &lt;strong&gt;procs=1&lt;/strong&gt;.&lt;/p&gt;
&lt;h4 id=&#34;output-concurrency-support&#34;&gt;Output concurrency support&lt;/h4&gt;
&lt;p&gt;For outputs that don&amp;rsquo;t support concurrency, &lt;code&gt;procs=1&lt;/code&gt; must be used to avoid corrupted output or
lost data.&lt;/p&gt;
&lt;p&gt;Refer to the output documentation to know if it supports concurrent processing.&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;

We&amp;rsquo;ll soon add a new function to the output to declare whether it supports concurrency,
and Baker will return an error if &lt;code&gt;procs&amp;gt;1&lt;/code&gt; is used with an output that doesn&amp;rsquo;t support it.
&lt;/div&gt;

&lt;h3 id=&#34;guarantee-records-order&#34;&gt;Guarantee Records order&lt;/h3&gt;
&lt;p&gt;Although it&amp;rsquo;s not the primary goal of Baker, it is still possible to disable concurrency and thus
guarantee records ordering from input to output.&lt;/p&gt;
&lt;p&gt;To do so, add both &lt;code&gt;procs=1&lt;/code&gt; for output and filterchain, disabling concurrent processing for
those components.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
